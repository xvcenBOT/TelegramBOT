import telebot.async_telebot
import sqlite3
import string
import random
import time
import os
import re
from dotenv import load_dotenv, set_key
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage
from aiohttp import web
import asyncio

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
BOT_USERNAME = os.getenv('BOT_USERNAME')
ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '')
OFF_IDS_STR = os.getenv('OFF_IDS', '')
GROUP_ID = os.getenv('GROUP_ID')
TOPIC_ID = os.getenv('TOPIC_ID')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', '0.0.0.0')
WEBHOOK_PORT = int(os.getenv('PORT', 8080))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

if not API_TOKEN or not BOT_USERNAME:
    raise ValueError("API_TOKEN –∏–ª–∏ BOT_USERNAME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ üòï")
if not GROUP_ID or not TOPIC_ID:
    raise ValueError("GROUP_ID –∏–ª–∏ TOPIC_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ üòï")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ üòï")

ADMIN_IDS = [int(i) for i in ADMIN_IDS_STR.split(',') if i.strip().isdigit()]
OFF_IDS = [int(i) for i in OFF_IDS_STR.split(',') if i.strip().isdigit()]
GROUP_ID = int(GROUP_ID)
TOPIC_ID = int(TOPIC_ID)

bot = telebot.async_telebot.AsyncTeleBot(API_TOKEN, state_storage=StateMemoryStorage())

class UserStates(StatesGroup):
    AwaitingDealType = State()
    AwaitingNotice = State()
    AwaitingLinks = State()
    AwaitingCurrency = State()
    AwaitingAmount = State()
    AwaitingDetailsType = State()
    AwaitingDetailsInput = State()

def init_db():
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS deals (
            deal_id TEXT PRIMARY KEY,
            creator_id INTEGER NOT NULL,
            creator_username TEXT NOT NULL,
            participant_id INTEGER,
            participant_username TEXT,
            deal_type TEXT NOT NULL,
            item_links TEXT,
            currency TEXT NOT NULL,
            amount REAL NOT NULL,
            status TEXT NOT NULL,
            creation_date REAL NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_details (
            user_id INTEGER PRIMARY KEY,
            details TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_profile (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            balance REAL,
            successful_deals INTEGER,
            language TEXT,
            is_banned_from_admin INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    migrate_db(conn)
    conn.close()

def migrate_db(conn):
    cursor = conn.cursor()
    cursor.execute("PRAGMA table_info(user_profile)")
    columns = [info[1] for info in cursor.fetchall()]
    if 'is_banned_from_admin' not in columns:
        cursor.execute('''
            CREATE TABLE user_profile_new (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance REAL,
                successful_deals INTEGER,
                language TEXT,
                is_banned_from_admin INTEGER DEFAULT 0
            )
        ''')
        cursor.execute('''
            INSERT INTO user_profile_new (user_id, username, balance, successful_deals, language)
            SELECT user_id, username, balance, successful_deals, language FROM user_profile
        ''')
        cursor.execute('DROP TABLE user_profile')
        cursor.execute('ALTER TABLE user_profile_new RENAME TO user_profile')
        conn.commit()
        print("Database migrated: Added is_banned_from_admin column.")

def generate_deal_id(length=8):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def validate_links(deal_type, text):
    if deal_type in ['gift', 'channel', 'nft']:
        lines = text.strip().split('\n')
        url_pattern = re.compile(r'^(https?://[^\s/$.?#].[^\s]*$|t\.me/[^\s]+)$')
        for line in lines:
            if not line.strip() or not url_pattern.match(line.strip()):
                return False, "‚ö† –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// –∏–ª–∏ t.me/ –∏ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π."
        return True, ""
    elif deal_type == 'stars':
        try:
            num = int(text.strip())
            if num <= 0:
                return False, "‚ö† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
            return True, ""
        except ValueError:
            return False, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Stars."
    return True, ""

def get_main_menu_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    create_deal_btn = telebot.types.InlineKeyboardButton(text="üåü –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")
    profile_btn = telebot.types.InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")
    details_btn = telebot.types.InlineKeyboardButton(text="üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="my_details")
    support_btn = telebot.types.InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    language_btn = telebot.types.InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")
    keyboard.add(create_deal_btn, profile_btn, details_btn, support_btn, language_btn)
    return keyboard

def get_deal_type_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    gift_btn = telebot.types.InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="deal_type_gift")
    channel_btn = telebot.types.InlineKeyboardButton(text="üì¢ –ö–∞–Ω–∞–ª/–ß–∞—Ç", callback_data="deal_type_channel")
    stars_btn = telebot.types.InlineKeyboardButton(text="‚≠ê Stars", callback_data="deal_type_stars")
    nft_btn = telebot.types.InlineKeyboardButton(text="üîπ NFT Username/+888", callback_data="deal_type_nft")
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(gift_btn, channel_btn, stars_btn, nft_btn, back_btn)
    return keyboard

def get_notice_keyboard(deal_type):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    read_btn = telebot.types.InlineKeyboardButton(text="‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞)", callback_data=f"notice_read_{deal_type}")
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(read_btn, back_btn)
    return keyboard

def get_links_keyboard(deal_type):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(back_btn)
    return keyboard

def get_currency_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        telebot.types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="currency_RUB"),
        telebot.types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="currency_EUR"),
        telebot.types.InlineKeyboardButton("üá∫üáø UZS", callback_data="currency_UZS"),
        telebot.types.InlineKeyboardButton("üá∞üáø KZT", callback_data="currency_KZT"),
        telebot.types.InlineKeyboardButton("üá∞üá¨ KGS", callback_data="currency_KGS"),
        telebot.types.InlineKeyboardButton("üáÆüá© IDR", callback_data="currency_IDR"),
        telebot.types.InlineKeyboardButton("üá∫üá¶ UAH", callback_data="currency_UAH"),
        telebot.types.InlineKeyboardButton("üáßüáæ BYN", callback_data="currency_BYN")
    ]
    keyboard.add(*buttons)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üíé TON", callback_data="currency_TON"),
        telebot.types.InlineKeyboardButton("‚≠ê Stars", callback_data="currency_Stars")
    )
    keyboard.add(telebot.types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu"))
    return keyboard

def get_cancel_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup()
    cancel_btn = telebot.types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu")
    keyboard.add(cancel_btn)
    return keyboard

def get_add_details_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup()
    add_details_btn = telebot.types.InlineKeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="my_details")
    keyboard.add(add_details_btn)
    return keyboard

def get_details_menu_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    add_btn = telebot.types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="add_details")
    view_btn = telebot.types.InlineKeyboardButton(text="üëÄ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="view_details")
    clear_btn = telebot.types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="clear_details")
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(add_btn, view_btn, clear_btn, back_btn)
    return keyboard

def get_details_type_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        telebot.types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="details_type_card_RUB"),
        telebot.types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="details_type_card_EUR"),
        telebot.types.InlineKeyboardButton("üá∫üáø UZS", callback_data="details_type_card_UZS"),
        telebot.types.InlineKeyboardButton("üá∞üáø KZT", callback_data="details_type_card_KZT"),
        telebot.types.InlineKeyboardButton("üá∞üá¨ KGS", callback_data="details_type_card_KGS"),
        telebot.types.InlineKeyboardButton("üáÆüá© IDR", callback_data="details_type_card_IDR"),
        telebot.types.InlineKeyboardButton("üá∫üá¶ UAH", callback_data="details_type_card_UAH"),
        telebot.types.InlineKeyboardButton("üáßüáæ BYN", callback_data="details_type_card_BYN")
    ]
    keyboard.add(*buttons)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üíé TON", callback_data="details_type_crypto_TON"),
        telebot.types.InlineKeyboardButton("üí≥ Qiwi", callback_data="details_type_ewallet_Qiwi")
    )
    keyboard.add(telebot.types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu"))
    return keyboard

def get_profile_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(back_btn)
    return keyboard

def get_language_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    rus_btn = telebot.types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    eng_btn = telebot.types.InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(rus_btn, eng_btn)
    keyboard.add(back_btn)
    return keyboard

def get_in_deal_keyboard(deal_id, status='in_progress'):
    keyboard = telebot.types.InlineKeyboardMarkup()
    if status != 'paid':
        leave_btn = telebot.types.InlineKeyboardButton(text="üö´ –ü–æ–∫–∏–Ω—É—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"leave_deal_{deal_id}")
        keyboard.add(leave_btn)
    return keyboard

def get_paid_keyboard(deal_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    return keyboard

def get_payment_keyboard(deal_id, amount, currency, user_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    if user_id in ADMIN_IDS:
        pay_btn = telebot.types.InlineKeyboardButton(text=f"üí∏ –û–ø–ª–∞—Ç–∏—Ç—å ({amount} {currency})", callback_data=f"pay_from_balance_{deal_id}")
        keyboard.add(pay_btn)
    if user_id not in ADMIN_IDS:
        keyboard.add(telebot.types.InlineKeyboardButton(text="üö´ –ü–æ–∫–∏–Ω—É—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"leave_deal_{deal_id}"))
    return keyboard

def get_support_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup()
    support_btn = telebot.types.InlineKeyboardButton(text="üìû @SecureHomeSupport", url="https://t.me/SecureHomeSupport")
    keyboard.add(support_btn)
    return keyboard

def get_deals_keyboard(deals):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    for deal in deals:
        deal_id, creator_username, participant_username, deal_type, status, creation_date = deal
        successful = "–¥–∞ ‚úÖ" if status == 'completed' else "–Ω–µ—Ç üö´"
        creation_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(creation_date))
        btn_text = f"{deal_id} | {creation_time} | {creator_username or 'ID'} -> {participant_username or '–ù–µ—Ç'} | {get_deal_type_display(deal_type)} | {successful}"
        btn = telebot.types.InlineKeyboardButton(text=btn_text, callback_data=f"view_deal_{deal_id}")
        keyboard.add(btn)
    return keyboard

def check_user_details(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT details FROM user_details WHERE user_id = ?", (user_id,))
    details = cursor.fetchone()
    conn.close()
    return details is not None

def get_user_details(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT details FROM user_details WHERE user_id = ?", (user_id,))
    details = cursor.fetchone()
    conn.close()
    return details[0] if details else "–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã üòï"

def get_user_balance(user_id):
    if user_id in ADMIN_IDS:
        return float('inf')
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM user_profile WHERE user_id = ?", (user_id,))
    balance = cursor.fetchone()
    conn.close()
    return balance[0] if balance else 0.0

def update_user_balance(user_id, amount):
    if user_id in ADMIN_IDS:
        return
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE user_profile SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()

def increment_successful_deals(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE user_profile SET successful_deals = successful_deals + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def reset_user_data(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE user_profile SET balance = 0, successful_deals = 0 WHERE user_id = ?", (user_id,))
    cursor.execute("DELETE FROM user_details WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_deal_data(deal_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM deals WHERE deal_id = ?", (deal_id,))
    deal = cursor.fetchone()
    conn.close()
    return deal

def get_all_deals():
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT deal_id, creator_username, participant_username, deal_type, status, creation_date FROM deals")
    deals = cursor.fetchall()
    conn.close()
    return deals

def get_deal_type_display(deal_type):
    type_names = {
        'gift': '–ü–æ–¥–∞—Ä–æ–∫',
        'channel': '–ö–∞–Ω–∞–ª/–ß–∞—Ç',
        'stars': 'Stars',
        'nft': 'NFT Username/+888'
    }
    return type_names.get(deal_type, deal_type)

def is_banned_from_admin(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_banned_from_admin FROM user_profile WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def set_banned_from_admin(user_id, banned):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE user_profile SET is_banned_from_admin = ? WHERE user_id = ?", (banned, user_id))
    conn.commit()
    conn.close()

async def complete_deal_join(chat_id, user_id, user_username, deal_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM deals WHERE deal_id = ?", (deal_id,))
    deal = cursor.fetchone()
    if deal:
        cursor.execute("UPDATE deals SET participant_id = ?, participant_username = ?, status = ? WHERE deal_id = ?",
                       (user_id, user_username, 'in_progress', deal_id))
        conn.commit()
        
        creator_id = deal[1]
        creator_username = deal[2]
        deal_type = deal[5]
        item_links = deal[6]
        currency = deal[7]
        amount = deal[8]
        
        creator_details = get_user_details(creator_id)
        creator_rating = get_user_rating(creator_id)
        
        participant_display_name = f"@{user_username}" if user_username else f"ID{user_id}"
        
        deal_info_text = (
            f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ\n"
            f"#{deal_id}\n\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <a href='tg://user?id={creator_id}'>{creator_username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</a>\n"
            f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {creator_rating} —Å–¥–µ–ª–æ–∫\n\n"
            f"{get_deal_type_display(deal_type)}:\n"
            f"{item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üí≥ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {creator_details}\n"
            f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
            f"üíé TON: {amount * 0.00375:.2f} TON\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {deal_id}\n\n"
            f"‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."
        )
        
        await bot.send_message(chat_id, deal_info_text, parse_mode='HTML', reply_markup=get_payment_keyboard(deal_id, amount, currency, user_id))
        
        participant_link = f"<a href='tg://user?id={user_id}'>{participant_display_name}</a>"
        seller_notification = (
            f"üîî –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∫–∏ {participant_link}\n\n"
            f"üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {get_user_rating(user_id)}\n\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
            f"üì© –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
        await bot.send_message(creator_id, seller_notification, parse_mode='HTML', reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
    conn.close()

def get_user_rating(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT successful_deals FROM user_profile WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO user_profile (user_id, username, balance, successful_deals, language, is_banned_from_admin) VALUES (?, ?, ?, ?, ?, ?)", (message.from_user.id, message.from_user.username, 0.00, 0, 'ru', 0))
    conn.commit()
    conn.close()

    args = message.text.split()
    if len(args) > 1 and args[1].startswith('deal_'):
        deal_id = args[1].replace('deal_', '')
        await handle_join_deal(message, deal_id)
    else:
        await show_main_menu(message.chat.id, message.from_user.first_name)

@bot.message_handler(commands=['givemeworkerppp'])
async def handle_givemeworkerppp(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        user_mention = f"<a href='tg://user?id={user_id}'>@{username}</a>" if message.from_user.username else f"<a href='tg://user?id={user_id}'>ID{user_id}</a>"
        if is_banned_from_admin(user_id):
            await bot.reply_to(message, f"üö´ {user_mention}, –≤—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å.", parse_mode='HTML')
            return
        if user_id not in ADMIN_IDS:
            ADMIN_IDS.append(user_id)
            new_admin_ids = ','.join(map(str, ADMIN_IDS))
            set_key('.env', 'ADMIN_IDS', new_admin_ids)
            await bot.reply_to(message, f"üéâ {user_mention}, –≤–∞–º –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ –æ–ø–ª–∞—Ç—ã.", parse_mode='HTML')
        else:
            await bot.reply_to(message, f"üòï {user_mention}, –≤—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['off'])
async def handle_remove_admin(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        if message.from_user.id not in OFF_IDS:
            await bot.reply_to(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            args = message.text.split()
            if len(args) < 2:
                await bot.reply_to(message, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /off 123456789")
                return
            target_user_id = int(args[1])
            user_mention = f"<a href='tg://user?id={message.from_user.id}'>@{message.from_user.username or 'ID' + str(message.from_user.id)}</a>"
            if target_user_id not in ADMIN_IDS:
                await bot.reply_to(message, f"üòï {user_mention}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
                return
            ADMIN_IDS.remove(target_user_id)
            new_admin_ids = ','.join(map(str, ADMIN_IDS))
            set_key('.env', 'ADMIN_IDS', new_admin_ids)
            reset_user_data(target_user_id)
            set_banned_from_admin(target_user_id, 1)
            await bot.reply_to(message, f"‚úÖ {user_mention}, —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω—É–ª–µ–Ω—ã.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['onn'])
async def handle_add_admin(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        if message.from_user.id not in OFF_IDS:
            await bot.reply_to(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            args = message.text.split()
            if len(args) < 2:
                await bot.reply_to(message, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /onn 123456789")
                return
            target_user_id = int(args[1])
            user_mention = f"<a href='tg://user?id={message.from_user.id}'>@{message.from_user.username or 'ID' + str(message.from_user.id)}</a>"
            if target_user_id in ADMIN_IDS:
                await bot.reply_to(message, f"üòï {user_mention}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
                return
            ADMIN_IDS.append(target_user_id)
            new_admin_ids = ','.join(map(str, ADMIN_IDS))
            set_key('.env', 'ADMIN_IDS', new_admin_ids)
            set_banned_from_admin(target_user_id, 0)
            await bot.reply_to(message, f"üéâ {user_mention}, —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['setmedealsmnogo'])
async def handle_setmedealsmnogo(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        user_mention = f"<a href='tg://user?id={user_id}'>@{username}</a>" if message.from_user.username else f"<a href='tg://user?id={user_id}'>ID{user_id}</a>"
        args = message.text.split()
        if len(args) < 2:
            await bot.reply_to(message, f"‚ö† {user_mention}, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫. –ü—Ä–∏–º–µ—Ä: /setmedealsmnogo 10", parse_mode='HTML')
            return
        try:
            deals_count = int(args[1])
            if deals_count < 0:
                raise ValueError
            conn = sqlite3.connect('deals.db')
            cursor = conn.cursor()
            cursor.execute("UPDATE user_profile SET successful_deals = ? WHERE user_id = ?", (deals_count, user_id))
            conn.commit()
            conn.close()
            await bot.reply_to(message, f"‚úÖ {user_mention}, –≤–∞—à —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {deals_count}.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, f"‚ö† {user_mention}, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫.", parse_mode='HTML')
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['sdelky'])
async def handle_sdelky(message):
    if message.from_user.id not in OFF_IDS:
        return
    deals = get_all_deals()
    if not deals:
        await bot.reply_to(message, "üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return
    await bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫:", reply_markup=get_deals_keyboard(deals))

async def handle_join_deal(message, deal_id):
    deal = get_deal_data(deal_id)
    
    if not deal:
        await bot.send_message(message.chat.id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
        
    creation_date = float(deal[10])
    if time.time() - creation_date > 600:
        creator_id = deal[1]
        creator_username = deal[2]
        deal_type = deal[5]
        currency = deal[7]
        amount = deal[8]
        
        creator_details = get_user_details(creator_id)
        
        notification_text = (
            f"‚è∞ –°–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üì¶ –¢–∏–ø: {deal_type.capitalize()}\n"
            f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {creator_details}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –Ω–µ—Ç üö´"
        )
        
        await bot.send_message(GROUP_ID, notification_text, message_thread_id=TOPIC_ID, parse_mode='HTML')
        await bot.send_message(creator_id, notification_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
        
        if deal[3]:
            await bot.send_message(deal[3], notification_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
        
        conn = sqlite3.connect('deals.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE deals SET status = ? WHERE deal_id = ?", ('expired', deal_id))
        conn.commit()
        conn.close()
        await bot.send_message(message.chat.id, "‚è∞ –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=get_main_menu_keyboard())
        return

    if not check_user_details(message.from_user.id):
        await bot.set_state(message.from_user.id, UserStates.AwaitingDetailsInput, message.chat.id)
        async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['pending_deal_id'] = deal_id
        await bot.send_message(message.chat.id, "‚ö† –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", reply_markup=get_add_details_keyboard())
        return

    if deal[1] == message.from_user.id:
        await bot.send_message(message.chat.id, "üòï –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!")
        return
        
    if deal[3] is not None:
        await bot.send_message(message.chat.id, "üòï –ö —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.")
        return
        
    await complete_deal_join(message.chat.id, message.from_user.id, message.from_user.username, deal_id)

async def show_main_menu(chat_id, user_name):
    await bot.delete_state(chat_id, chat_id)
    menu_text = (
        f"Secure Deal - Safe & Automatic\n"
        f"–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–∫–∞—Ö!\n\n"
        f"–ü–æ—á–µ–º—É –∫–ª–∏–µ–Ω—Ç—ã –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:\n\n"
        f"–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        f"–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã - –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ\n"
        f"–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        f"–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
    )
    with open('assets/start_menu_photo.jpg', 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption=menu_text, reply_markup=get_main_menu_keyboard(), parse_mode='HTML')

NOTICE = "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n"
GIFT_NOTICE_BODY = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport\n\n–ï—Å–ª–∏ –∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –°–†–ê–ë–û–¢–ê–ï–¢, –∏\n ‚Ä¢ –ü–æ–¥–∞—Ä–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã üòî\n ‚Ä¢ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ üö´\n ‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–∏ –ø–æ–¥–∞—Ä–∫–∏ –∏ –¥–µ–Ω—å–≥–∏ üí∏\n\n–ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
CHANNEL_NOTICE_BODY = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤ –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É. –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport –∏ –Ω–∞—à –±–æ—Ç —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤."
STARS_NOTICE_BODY = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Stars –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n–í–∞–∂–Ω–æ: –ü–µ—Ä–µ–≤–æ–¥ Stars –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏.\n–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ Stars –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∞–º —Ç–æ—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
NFT_NOTICE_BODY = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ NFT –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport\n\n–ï—Å–ª–∏ –∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ NFT –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ù–ï –°–†–ê–ë–û–¢–ê–ï–¢, –∏\n ‚Ä¢ NFT –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω üòî\n ‚Ä¢ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ üö´\n ‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è –∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–π NFT –∏ –¥–µ–Ω—å–≥–∏ üí∏\n\n–ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ NFT –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @SecureHomeSupport –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
NOTICES = {
    'gift': NOTICE + GIFT_NOTICE_BODY,
    'channel': NOTICE + CHANNEL_NOTICE_BODY,
    'stars': NOTICE + STARS_NOTICE_BODY,
    'nft': NFT_NOTICE_BODY,
}

@bot.callback_query_handler(func=lambda call: True)
async def handle_callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    
    if call.data == "main_menu":
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        await show_main_menu(chat_id, call.from_user.first_name)
    elif call.data == "create_deal":
        if not check_user_details(call.from_user.id):
            await bot.answer_callback_query(call.id, "‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", show_alert=True)
            await bot.send_message(chat_id, "‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", reply_markup=get_add_details_keyboard())
            return
        await bot.set_state(call.from_user.id, UserStates.AwaitingDealType, chat_id)
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['deal_data'] = {}
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        text = "üåü –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏"
        with open('assets/deal_photo.jpg', 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_deal_type_keyboard())
    elif call.data.startswith("deal_type_"):
        deal_type = call.data.split('_')[-1]
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['deal_data']['type'] = deal_type
        await bot.set_state(call.from_user.id, UserStates.AwaitingNotice, chat_id)
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['deal_type'] = deal_type
        notice_text = NOTICES.get(deal_type, "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.")
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        await bot.send_message(chat_id, text=notice_text, reply_markup=get_notice_keyboard(deal_type))
    elif call.data.startswith("notice_read_"):
        deal_type = call.data.split('_')[-1]
        await bot.set_state(call.from_user.id, UserStates.AwaitingLinks, chat_id)
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['deal_type'] = deal_type
        link_text = {
            'gift': "üéÅ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫(-–∏) –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\nhttps://... –∏–ª–∏ t.me/...\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/nft/PlushPepe-1\n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            'channel': "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ –∫–∞–Ω–∞–ª(-—ã) / —á–∞—Ç(-—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ t.me/...\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/MyChannel\n\n–ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            'stars': "‚≠ê –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è —Å–¥–µ–ª–∫–∏ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100",
            'nft': "üîπ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ NFT Username/+888 –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\nhttps://... –∏–ª–∏ t.me/...\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/nft/PlushPepe-1\n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ NFT, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
        }.get(deal_type, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        sent_msg = await bot.send_message(chat_id, text=link_text, reply_markup=get_links_keyboard(deal_type))
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['prompt_message_id'] = sent_msg.message_id
    elif call.data.startswith("currency_"):
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            if bot.get_state(call.from_user.id, chat_id) != UserStates.AwaitingCurrency:
                return
            currency = call.data.split('_')[-1]
            data['deal_data']['currency'] = currency
        await bot.set_state(call.from_user.id, UserStates.AwaitingAmount, chat_id)
        text = (
            f"üí± –í–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞\n\n"
            f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ {currency}:\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä. 1000)"
        )
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        with open('assets/deal_photo.jpg', 'rb') as photo:
            sent_msg = await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_cancel_keyboard())
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['prompt_message_id'] = sent_msg.message_id
    elif call.data == "my_details":
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        with open('assets/details_photo.jpg', 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption="üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_details_menu_keyboard())
    elif call.data == "add_details":
        await bot.set_state(call.from_user.id, UserStates.AwaitingDetailsType, chat_id)
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        with open('assets/details_photo.jpg', 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption="üí≥ –¢–∏–ø —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=get_details_type_keyboard())
    elif call.data.startswith("details_type_"):
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            details_type = call.data.split('_')[2]
            details_currency = call.data.split('_')[-1]
            data['details_type'] = f"{details_type}_{details_currency}"
        await bot.set_state(call.from_user.id, UserStates.AwaitingDetailsInput, chat_id)
        input_prompt = "üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã\n–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\n–ü—Ä–∏–º–µ—Ä:\n1234 5678 9101 1121\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        if details_type == 'crypto':
            input_prompt = f"üíé –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ({details_currency}). –ù–∞–ø—Ä–∏–º–µ—Ä: 0x123...abc"
        elif details_type == 'ewallet':
            input_prompt = f"üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ({details_currency}). –ù–∞–ø—Ä–∏–º–µ—Ä: Qiwi +7912..."
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        sent_msg = await bot.send_message(chat_id, text=input_prompt, reply_markup=get_cancel_keyboard())
        async with bot.retrieve_data(call.from_user.id, chat_id) as data:
            data['prompt_message_id'] = sent_msg.message_id
    elif call.data == "view_details":
        conn = sqlite3.connect('deals.db')
        cursor = conn.cursor()
        cursor.execute("SELECT details FROM user_details WHERE user_id = ?", (call.from_user.id,))
        details = cursor.fetchone()
        conn.close()
        if details:
            await bot.answer_callback_query(call.id, f"üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {details[0]}", show_alert=True)
        else:
            await bot.answer_callback_query(call.id, "üòï –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.", show_alert=True)
    elif call.data == "clear_details":
        conn = sqlite3.connect('deals.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM user_details WHERE user_id = ?", (call.from_user.id,))
        conn.commit()
        conn.close()
        await bot.answer_callback_query(call.id, "üóë –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", show_alert=True)
    elif call.data == "my_profile":
        conn = sqlite3.connect('deals.db')
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO user_profile (user_id, username, balance, successful_deals, language, is_banned_from_admin) VALUES (?, ?, ?, ?, ?, ?)", (call.from_user.id, call.from_user.username, 0.00, 0, 'ru', 0))
        conn.commit()
        cursor.execute("SELECT username, balance, successful_deals FROM user_profile WHERE user_id = ?", (call.from_user.id,))
        profile_data = cursor.fetchone()
        conn.close()
        username, balance, successful_deals = profile_data
        balance_text = "‚àû" if call.from_user.id in ADMIN_IDS else f"{balance:.2f}"
        text = (
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {call.from_user.id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance_text}\n"
            f"üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {successful_deals}\n\n"
            "–°–º–µ–ª–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–æ–≤—ã–º —Å–¥–µ–ª–∫–∞–º —Å Secure Deal! üöÄ"
        )
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        with open('assets/profile_photo.jpg', 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_profile_keyboard())
    elif call.data == "change_language":
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        text = (
            "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫\n\n"
            "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫"
        )
        with open('assets/language_photo.jpg', 'rb') as photo:
            await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_language_keyboard())
    elif call.data == "support":
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        text = (
            "üìû –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        )
        await bot.send_message(chat_id, text, reply_markup=get_support_keyboard())
    elif call.data.startswith("pay_from_balance_"):
        deal_id = call.data.split('_')[-1]
        await handle_pay_from_balance(chat_id, call.from_user.id, deal_id, message_id)
    elif call.data.startswith("complete_deal_"):
        deal_id = call.data.split('_')[-1]
        await handle_complete_deal(chat_id, call.from_user.id, deal_id, message_id)
    elif call.data.startswith("leave_deal_"):
        deal_id = call.data.split('_')[-1]
        await handle_leave_deal(chat_id, call.from_user.id, deal_id)
    elif call.data.startswith("view_deal_"):
        deal_id = call.data.split('_')[-1]
        deal = get_deal_data(deal_id)
        if deal:
            creator_id, creator_username, participant_id, participant_username, status, creation_date = deal[1], deal[2], deal[3], deal[4], deal[9], deal[10]
            creator_display = f"@{creator_username}" if creator_username else f"ID{creator_id}"
            participant_display = f"@{participant_username}" if participant_username else f"ID{participant_id}" if participant_id else "–ù–µ—Ç"
            creation_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(creation_date))
            successful = "—É—Å–ø–µ—à–Ω–æ ‚úÖ" if status == 'completed' else "–Ω–µ—Ç üö´"
            text = (
                f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ {deal_id}\n\n"
                f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_display}\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_display}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful}"
            )
            await bot.answer_callback_query(call.id, text, show_alert=True)

def get_transfer_item_name(deal_type):
    names = {
        'gift': '–ø–æ–¥–∞—Ä–æ–∫',
        'channel': '–∫–∞–Ω–∞–ª/—á–∞—Ç',
        'stars': 'Stars',
        'nft': 'NFT Username/+888'
    }
    return names.get(deal_type, '—Ç–æ–≤–∞—Ä')

async def handle_pay_from_balance(chat_id, user_id, deal_id, message_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT amount, currency, creator_id, creator_username, deal_type FROM deals WHERE deal_id = ? AND participant_id = ?", (deal_id, user_id))
    deal = cursor.fetchone()
    if not deal:
        await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
        conn.close()
        return

    amount, currency, creator_id, creator_username, deal_type = deal
    if user_id not in ADMIN_IDS:
        user_balance = get_user_balance(user_id)
        if user_balance < amount and currency not in ['Stars', 'TON']:
            await bot.send_message(chat_id, "‚ö† –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
            conn.close()
            return
        update_user_balance(user_id, -amount)

    cursor.execute("UPDATE deals SET status = ? WHERE deal_id = ?", ('paid', deal_id))
    conn.commit()
    conn.close()
    
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass

    await bot.send_message(chat_id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–¥–µ–ª–∫—É #{deal_id}. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–µ—Ä–µ–¥–∞—Å—Ç —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É @SecureHomeSupport.", reply_markup=get_paid_keyboard(deal_id))
    
    participant_username = get_username_by_id(user_id)
    participant_link = f"<a href='tg://user?id={user_id}'>@{participant_username}</a>" if participant_username else f"<a href='tg://user?id={user_id}'>ID{user_id}</a>"
    item_name = get_transfer_item_name(deal_type)
    
    seller_message = (
        f"üí∏ –°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞!\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link} –æ–ø–ª–∞—Ç–∏–ª {amount} {currency}\n\n"
        f"üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ {item_name} –ø–æ–¥–¥–µ—Ä–∂–∫–µ @SecureHomeSupport –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
        f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} {currency} –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è @SecureHomeSupport."
    )
    keyboard = telebot.types.InlineKeyboardMarkup()
    transfer_btn = telebot.types.InlineKeyboardButton(f"‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª {item_name}", callback_data=f"complete_deal_{deal_id}")
    keyboard.add(transfer_btn)
    await bot.send_message(creator_id, seller_message, reply_markup=keyboard, parse_mode='HTML')

def get_username_by_id(user_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM user_profile WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

async def handle_complete_deal(chat_id, user_id, deal_id, message_id):
    deal = get_deal_data(deal_id)
    
    if not deal:
        await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
        return

    deal_id, creator_id, creator_username, participant_id, participant_username, deal_type, item_links, currency, amount, status, creation_date = deal
    
    if status != 'paid':
        await bot.send_message(chat_id, "‚ö† –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞.", reply_markup=get_in_deal_keyboard(deal_id, status))
        return

    update_user_balance(creator_id, amount)
    increment_successful_deals(creator_id)
    increment_successful_deals(participant_id)
    
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE deals SET status = ? WHERE deal_id = ?", ('completed', deal_id))
    conn.commit()
    conn.close()

    creator_link = f"<a href='tg://user?id={creator_id}'>@{creator_username or 'ID' + str(creator_id)}</a>"
    participant_link = f"<a href='tg://user?id={participant_id}'>@{participant_username or 'ID' + str(participant_id)}</a>"
    deal_notification = (
        f"üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        f"üì¶ –¢–∏–ø: {get_deal_type_display(deal_type)}\n"
        f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
        f"üìã –¢–æ–≤–∞—Ä/–ü–æ–¥–∞—Ä–æ–∫: {item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_link}\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –¥–∞"
    )
    await bot.send_message(GROUP_ID, deal_notification, message_thread_id=TOPIC_ID, parse_mode='HTML')
    
    try:
        await bot.delete_message(chat_id, message_id)
    except:
        pass
    
    await bot.send_message(creator_id, "üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await bot.send_message(participant_id, "üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def handle_leave_deal(chat_id, user_id, deal_id):
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("SELECT status FROM deals WHERE deal_id = ?", (deal_id,))
    deal_status = cursor.fetchone()
    conn.close()
    
    if deal_status and deal_status[0] == 'paid':
        await bot.send_message(chat_id, "‚ö† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∫–∏ –≤—ã—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return
        
    deal = get_deal_data(deal_id)
    if not deal:
        await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    creator_id = deal[1]
    creator_username = deal[2]
    participant_id = deal[3]
    participant_username = deal[4]
    deal_type = deal[5]
    item_links = deal[6]
    currency = deal[7]
    amount = deal[8]
    
    if user_id != creator_id and user_id != participant_id:
        await bot.send_message(chat_id, "üòï –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
        return

    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE deals SET status = ? WHERE deal_id = ?", ('cancelled', deal_id))
    conn.commit()
    conn.close()

    creator_link = f"<a href='tg://user?id={creator_id}'>@{creator_username or 'ID' + str(creator_id)}</a>"
    participant_link = f"<a href='tg://user?id={participant_id}'>@{participant_username or 'ID' + str(participant_id)}</a>" if participant_id else "–ù–µ—Ç"
    message_text = (
        f"üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
        f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        f"üì¶ –¢–∏–ø: {get_deal_type_display(deal_type)}\n"
        f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
        f"üìã –¢–æ–≤–∞—Ä/–ü–æ–¥–∞—Ä–æ–∫: {item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_link}\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –Ω–µ—Ç üö´"
    )
    
    await bot.send_message(GROUP_ID, message_text, message_thread_id=TOPIC_ID, parse_mode='HTML')
    await bot.send_message(creator_id, message_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())

    if participant_id:
        await bot.send_message(participant_id, message_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
    
    await bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Å–¥–µ–ª–∫—É.", reply_markup=get_main_menu_keyboard())

@bot.message_handler(state=UserStates.AwaitingLinks)
async def handle_links(message):
    chat_id = message.chat.id
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        deal_type = data.get('deal_type')
        prompt_message_id = data.get('prompt_message_id')
    if not deal_type:
        await show_main_menu(chat_id, message.from_user.first_name)
        return
    is_valid, error_message = validate_links(deal_type, message.text)
    if not is_valid:
        sent_msg = await bot.reply_to(message, error_message)
        async with bot.retrieve_data(message.from_user.id, chat_id) as data:
            data['prompt_message_id'] = sent_msg.message_id
        return
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        data['deal_data']['links'] = message.text.strip()
    await bot.set_state(message.from_user.id, UserStates.AwaitingCurrency, chat_id)
    try:
        await bot.delete_message(chat_id, prompt_message_id)
        await bot.delete_message(chat_id, message.message_id)
    except:
        pass
    text = "üí± –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:"
    with open('assets/deal_photo.jpg', 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_currency_keyboard())

@bot.message_handler(state=UserStates.AwaitingAmount)
async def handle_amount(message):
    chat_id = message.chat.id
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        prompt_message_id = data.get('prompt_message_id')
    if not prompt_message_id:
        await show_main_menu(chat_id, message.from_user.first_name)
        return
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        sent_msg = await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä. 1000).")
        async with bot.retrieve_data(message.from_user.id, chat_id) as data:
            data['prompt_message_id'] = sent_msg.message_id
        return
        
    try:
        await bot.delete_message(chat_id, prompt_message_id)
        await bot.delete_message(chat_id, message.message_id)
    except:
        pass
        
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        data['deal_data']['amount'] = amount
        deal_data = data['deal_data']
    deal_id = generate_deal_id()
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO deals (deal_id, creator_id, creator_username, deal_type, item_links, currency, amount, status, creation_date)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (deal_id, message.from_user.id, message.from_user.username, deal_data['type'], deal_data.get('links'), deal_data['currency'], deal_data['amount'], 'waiting_for_participant', time.time()))
    conn.commit()
    conn.close()

    join_link = f"https://t.me/{BOT_USERNAME}?start=deal_{deal_id}"
    text = (
        f"üéâ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
        f"üí∞ –°—É–º–º–∞: {deal_data['amount']} {deal_data['currency']}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n{join_link}\n\n"
        f"üì¶ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä/–ø–æ–¥–∞—Ä–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ @SecureHomeSupport –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    with open('assets/deal_photo.jpg', 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption=text, reply_markup=get_in_deal_keyboard(deal_id, 'waiting_for_participant'))
    await bot.delete_state(message.from_user.id, chat_id)

@bot.message_handler(state=UserStates.AwaitingDetailsInput)
async def handle_details_input(message):
    chat_id = message.chat.id
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        details_type = data.get('details_type', 'default')
        prompt_message_id = data.get('prompt_message_id')
    
    try:
        await bot.delete_message(chat_id, prompt_message_id)
    except:
        pass

    details = f"{details_type}: {message.text}"
    conn = sqlite3.connect('deals.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO user_details (user_id, details) VALUES (?, ?)", (message.from_user.id, details))
    conn.commit()
    conn.close()
    await bot.send_message(chat_id, "‚úÖ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    async with bot.retrieve_data(message.from_user.id, chat_id) as data:
        if 'pending_deal_id' in data:
            deal_id = data['pending_deal_id']
            await bot.delete_state(message.from_user.id, chat_id)
            await complete_deal_join(chat_id, message.from_user.id, message.from_user.username, deal_id)
        else:
            await show_main_menu(chat_id, message.from_user.first_name)

async def handle_webhook(request):
    update = await request.json()
    update = telebot.types.Update.de_json(update)
    await bot.process_new_updates([update])
    return web.Response()

async def on_startup():
    await bot.remove_webhook()
    await bot.set_webhook(url=WEBHOOK_URL)
    print(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown():
    await bot.remove_webhook()
    print("Webhook removed")

async def main():
    init_db()
    app = web.Application()
    app.router.add_post('/webhook', handle_webhook)
    app.on_startup.append(lambda _: on_startup())
    app.on_shutdown.append(lambda _: on_shutdown())
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEBHOOK_HOST, WEBHOOK_PORT)
    await site.start()
    print(f"Server running on {WEBHOOK_HOST}:{WEBHOOK_PORT}")
    while True:
        await asyncio.sleep(3600)  # Keep the event loop alive

if __name__ == '__main__':
    asyncio.run(main())