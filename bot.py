import telebot.async_telebot
from firebase_admin import firestore
import string
import random
import time
import os
import re
from dotenv import load_dotenv
from telebot.asyncio_handler_backends import State, StatesGroup
from telebot.asyncio_storage import StateMemoryStorage
from telebot.asyncio_filters import StateFilter
from aiohttp import web
import asyncio
import logging
from firebase_config import init_firebase

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
BOT_USERNAME = os.getenv('BOT_USERNAME')
OFF_IDS_STR = os.getenv('OFF_IDS', '')
GROUP_ID = os.getenv('GROUP_ID')
TOPIC_ID = os.getenv('TOPIC_ID')
WEBHOOK_HOST = os.getenv('WEBHOOK_HOST', '0.0.0.0')
WEBHOOK_PORT = int(os.getenv('PORT', 8080))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

if not API_TOKEN or not BOT_USERNAME:
    raise ValueError("API_TOKEN –∏–ª–∏ BOT_USERNAME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ üòï")
if not GROUP_ID or not TOPIC_ID:
    raise ValueError("GROUP_ID –∏–ª–∏ TOPIC_ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ üòï")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ üòï")

OFF_IDS = [int(i) for i in OFF_IDS_STR.split(',') if i.strip().isdigit()]
GROUP_ID = int(GROUP_ID)
TOPIC_ID = int(TOPIC_ID)

db = init_firebase()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

_ADMIN_IDS_CACHE = {
    'ids': None,
    'ts': 0.0,
    'ttl': 60.0
}

# –õ—ë–≥–∫–∏–µ –∫—ç—à–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
_LANG_CACHE = {'map': {}, 'ttl': 60.0}           # user_id -> (lang, ts)
_PROFILE_CACHE = {'map': {}, 'ttl': 30.0}        # user_id -> (profile_dict, ts)
_DETAILS_CACHE = {'map': {}, 'ttl': 30.0}        # user_id -> (details_text, ts)

URL_PATTERN = re.compile(r'^(https?://[^\s/$.?#].[^\s]*$|t\.me/[^\s]+)$')
CARD_PATTERN = re.compile(r'^\d{4}\s\d{4}\s\d{4}\s\d{4}\n[A-Za-z–ê-–Ø–∞-—è\s]+$')
CRYPTO_PATTERN = re.compile(r'^[A-Za-z0-9]+[A-Za-z0-9\-_/]*$')
EWALLET_PATTERN = re.compile(r'^\+?\d+$')

def get_admin_ids():
    try:
        now = time.time()
        if _ADMIN_IDS_CACHE['ids'] is not None and (now - _ADMIN_IDS_CACHE['ts'] < _ADMIN_IDS_CACHE['ttl']):
            return _ADMIN_IDS_CACHE['ids']
        
        admin_ref = db.collection('admin_ids').document('init').get()
        
        if admin_ref.exists:
            admin_ids = admin_ref.to_dict().get('ids', [])
        else:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
            db.collection('admin_ids').document('init').set({'ids': []})
            admin_ids = []
        
        _ADMIN_IDS_CACHE['ids'] = admin_ids
        _ADMIN_IDS_CACHE['ts'] = now
        logger.info(f"Fetched admin_ids: {admin_ids}")
        return admin_ids
        
    except Exception as e:
        logger.error(f"Error fetching admin_ids: {e}")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

bot = telebot.async_telebot.AsyncTeleBot(API_TOKEN, state_storage=StateMemoryStorage())
bot.add_custom_filter(StateFilter(bot))

class UserStates(StatesGroup):
    AwaitingDealType = State()
    AwaitingNotice = State()
    AwaitingLinks = State()
    AwaitingCurrency = State()
    AwaitingAmount = State()
    AwaitingDetailsType = State()
    AwaitingDetailsInput = State()

def generate_deal_id(length=8):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def validate_links(deal_type, text):
    if deal_type in ['gift', 'channel', 'nft']:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏/–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
        parts = [p.strip() for p in re.split(r"\s+", (text or '').strip()) if p.strip()]
        for part in parts:
            if not URL_PATTERN.match(part):
                return False, "‚ö† –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https:// –∏–ª–∏ t.me/ –∏ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π."
        return True, ""
    elif deal_type == 'stars':
        try:
            num = int(text.strip())
            if num <= 0:
                return False, "‚ö† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
            return True, ""
        except ValueError:
            return False, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Stars."
    return True, ""

def get_main_menu_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    create_deal_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_create_deal'), callback_data="create_deal")
    profile_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_profile'), callback_data="my_profile")
    details_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_details'), callback_data="my_details")
    support_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_support'), url="https://t.me/GiftGuarantHelp")
    language_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_language'), callback_data="change_language")
    keyboard.add(create_deal_btn, profile_btn, details_btn, support_btn, language_btn)
    return keyboard

def get_deal_type_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    gift_btn = telebot.types.InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="deal_type_gift")
    channel_btn = telebot.types.InlineKeyboardButton(text="üì£ –ö–∞–Ω–∞–ª / –ß–∞—Ç", callback_data="deal_type_channel")
    stars_btn = telebot.types.InlineKeyboardButton(text="‚≠ê –ó–≤—ë–∑–¥—ã", callback_data="deal_type_stars")
    nft_btn = telebot.types.InlineKeyboardButton(text="üî∏ NFT username / +888", callback_data="deal_type_nft")
    back_btn = telebot.types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(gift_btn, channel_btn)
    keyboard.add(stars_btn, nft_btn)
    keyboard.add(back_btn)
    return keyboard

def get_notice_keyboard(deal_type, lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    read_btn = telebot.types.InlineKeyboardButton(text="üëå OK", callback_data=f"notice_read_{deal_type}")
    back_btn = telebot.types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(read_btn, back_btn)
    return keyboard

def get_links_keyboard(deal_type, lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_back'), callback_data="main_menu")
    keyboard.add(back_btn)
    return keyboard

def get_currency_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        telebot.types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="currency_RUB"),
        telebot.types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="currency_EUR"),
        telebot.types.InlineKeyboardButton("üá∫üáø UZS", callback_data="currency_UZS"),
        telebot.types.InlineKeyboardButton("üá∞üáø KZT", callback_data="currency_KZT"),
        telebot.types.InlineKeyboardButton("üá∞üá¨ KGS", callback_data="currency_KGS"),
        telebot.types.InlineKeyboardButton("üáÆüá© IDR", callback_data="currency_IDR"),
        telebot.types.InlineKeyboardButton("üá∫üá¶ UAH", callback_data="currency_UAH"),
        telebot.types.InlineKeyboardButton("üáßüáæ BYN", callback_data="currency_BYN")
    ]
    keyboard.add(*buttons)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üíé TON", callback_data="currency_TON"),
        telebot.types.InlineKeyboardButton("‚≠ê Stars", callback_data="currency_Stars")
    )
    keyboard.add(telebot.types.InlineKeyboardButton(t(lang, 'btn_cancel'), callback_data="main_menu"))
    return keyboard

def get_cancel_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup()
    cancel_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_cancel'), callback_data="main_menu")
    keyboard.add(cancel_btn)
    return keyboard

def get_add_details_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup()
    add_details_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_add_details'), callback_data="my_details")
    keyboard.add(add_details_btn)
    return keyboard

def get_details_menu_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    add_btn = telebot.types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="add_details")
    view_btn = telebot.types.InlineKeyboardButton(text="üëÄ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="view_details")
    clear_btn = telebot.types.InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="clear_details")
    back_btn = telebot.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.add(add_btn, view_btn, clear_btn, back_btn)
    return keyboard

def get_details_type_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=4)
    buttons = [
        telebot.types.InlineKeyboardButton("üá∑üá∫ RUB", callback_data="details_type_card_RUB"),
        telebot.types.InlineKeyboardButton("üá™üá∫ EUR", callback_data="details_type_card_EUR"),
        telebot.types.InlineKeyboardButton("üá∫üáø UZS", callback_data="details_type_card_UZS"),
        telebot.types.InlineKeyboardButton("üá∞üáø KZT", callback_data="details_type_card_KZT"),
        telebot.types.InlineKeyboardButton("üá∞üá¨ KGS", callback_data="details_type_card_KGS"),
        telebot.types.InlineKeyboardButton("üáÆüá© IDR", callback_data="details_type_card_IDR"),
        telebot.types.InlineKeyboardButton("üá∫üá¶ UAH", callback_data="details_type_card_UAH"),
        telebot.types.InlineKeyboardButton("üáßüáæ BYN", callback_data="details_type_card_BYN")
    ]
    keyboard.add(*buttons)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üíé TON", callback_data="details_type_crypto_TON"),
        telebot.types.InlineKeyboardButton("üí≥ Qiwi", callback_data="details_type_ewallet_Qiwi")
    )
    keyboard.add(telebot.types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="main_menu"))
    return keyboard

def get_profile_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    back_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_back'), callback_data="main_menu")
    keyboard.add(back_btn)
    return keyboard

def get_language_keyboard(lang='ru'):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    rus_btn = telebot.types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    eng_btn = telebot.types.InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")
    back_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'btn_back'), callback_data="main_menu")
    keyboard.add(rus_btn, eng_btn)
    keyboard.add(back_btn)
    return keyboard


def get_in_deal_keyboard(deal_id, status='in_progress'):
    keyboard = telebot.types.InlineKeyboardMarkup()
    return keyboard

def get_paid_keyboard(deal_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    return keyboard

def get_payment_keyboard(deal_id, amount, currency, user_id):
    keyboard = telebot.types.InlineKeyboardMarkup()
    admin_ids = get_admin_ids()
    if user_id in admin_ids:
        lang = get_user_language(user_id)
        pay_btn = telebot.types.InlineKeyboardButton(text=t(lang, 'pay_btn', amount=amount, currency=currency), callback_data=f"pay_from_balance_{deal_id}")
        keyboard.add(pay_btn)
    return keyboard


def get_deals_keyboard(deals):
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    for deal in deals:
        deal_id, creator_username, participant_username, deal_type, status, creation_date = deal
        successful = "–¥–∞ ‚úÖ" if status == 'completed' else "–Ω–µ—Ç üö´"
        creation_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(creation_date))
        btn_text = f"{deal_id} | {creation_time} | {creator_username or 'ID'} -> {participant_username or '–ù–µ—Ç'} | {get_deal_type_display(deal_type)} | {successful}"
        btn = telebot.types.InlineKeyboardButton(text=btn_text, callback_data=f"view_deal_{deal_id}")
        keyboard.add(btn)
    return keyboard

def check_user_details(user_id):
    try:
        details_doc = db.collection('user_details').document(str(user_id)).get()
        logger.info(f"Checked details for user {user_id}: exists={details_doc.exists}")
        return details_doc.exists
    except Exception as e:
        logger.error(f"Error checking user details for {user_id}: {e}")
        return False

def get_user_details(user_id):
    try:
        now = time.time()
        cached = _DETAILS_CACHE['map'].get(user_id)
        if cached and now - cached[1] < _DETAILS_CACHE['ttl']:
            return cached[0]
        details_doc = db.collection('user_details').document(str(user_id)).get()
        if not details_doc.exists:
            result = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã üòï"
            _DETAILS_CACHE['map'][user_id] = (result, now)
            return result
        data = details_doc.to_dict() or {}
        if isinstance(data.get('details'), str):
            result = data.get('details')
            _DETAILS_CACHE['map'][user_id] = (result, now)
            return result
        details_type = data.get('type')
        value = data.get('value')
        if details_type and value:
            result = f"{details_type}: {value}"
            _DETAILS_CACHE['map'][user_id] = (result, now)
            return result
        result = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã üòï"
        _DETAILS_CACHE['map'][user_id] = (result, now)
        return result
    except Exception as e:
        logger.error(f"Error fetching user details for {user_id}: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ üòï"

def get_user_balance(user_id):
    admin_ids = get_admin_ids()
    if user_id in admin_ids:
        return float('inf')
    try:
        now = time.time()
        cached_profile = _PROFILE_CACHE['map'].get(user_id)
        if cached_profile and now - cached_profile[1] < _PROFILE_CACHE['ttl']:
            balance = (cached_profile[0] or {}).get('balance', 0.0)
            logger.info(f"Fetched balance from cache for user {user_id}: {balance}")
            return balance
        profile_doc = db.collection('user_profile').document(str(user_id)).get()
        profile = profile_doc.to_dict() if profile_doc.exists else {}
        _PROFILE_CACHE['map'][user_id] = (profile, now)
        balance = profile.get('balance', 0.0)
        logger.info(f"Fetched balance for user {user_id}: {balance}")
        return balance
    except Exception as e:
        logger.error(f"Error fetching balance for {user_id}: {e}")
        return 0.0

def update_user_balance(user_id, amount):
    admin_ids = get_admin_ids()
    if user_id in admin_ids:
        logger.info(f"User {user_id} is admin, balance not updated")
        return
    try:
        profile_ref = db.collection('user_profile').document(str(user_id))
        profile = profile_ref.get().to_dict() or {}
        current_balance = profile.get('balance', 0.0)
        profile_ref.update({'balance': current_balance + amount})
        logger.info(f"Updated balance for user {user_id}: {current_balance + amount}")
        _PROFILE_CACHE['map'].pop(user_id, None)
    except Exception as e:
        logger.error(f"Error updating balance for {user_id}: {e}")

def increment_successful_deals(user_id):
    try:
        profile_ref = db.collection('user_profile').document(str(user_id))
        profile = profile_ref.get().to_dict() or {}
        current_deals = profile.get('successful_deals', 0)
        profile_ref.update({'successful_deals': current_deals + 1})
        logger.info(f"Incremented successful deals for user {user_id}: {current_deals + 1}")
    except Exception as e:
        logger.error(f"Error incrementing successful deals for {user_id}: {e}")

def reset_user_data(user_id):
    try:
        profile_ref = db.collection('user_profile').document(str(user_id))
        profile_ref.update({
            'balance': 0.0,
            'successful_deals': 0
        })
        db.collection('user_details').document(str(user_id)).delete()
        logger.info(f"Reset data for user {user_id}")
        _PROFILE_CACHE['map'].pop(user_id, None)
        _DETAILS_CACHE['map'].pop(user_id, None)
    except Exception as e:
        logger.error(f"Error resetting data for {user_id}: {e}")

def get_deal_data(deal_id):
    try:
        deal_doc = db.collection('deals').document(str(deal_id)).get()
        deal = deal_doc.to_dict()
        if deal:
            logger.info(f"Fetched deal {deal_id}: {deal}")
            return (
                deal_id,
                deal.get('creator_id'),
                deal.get('creator_username'),
                deal.get('participant_id'),
                deal.get('participant_username'),
                deal.get('deal_type'),
                deal.get('item_links'),
                deal.get('currency'),
                deal.get('amount'),
                deal.get('status'),
                deal.get('creation_date')
            )
        logger.info(f"Deal {deal_id} not found")
        return None
    except Exception as e:
        logger.error(f"Error fetching deal {deal_id}: {e}")
        return None

def get_all_deals():
    try:
        deals = db.collection('deals').get()
        result = [(deal.id, deal.to_dict().get('creator_username'), deal.to_dict().get('participant_username'), 
                 deal.to_dict().get('deal_type'), deal.to_dict().get('status'), deal.to_dict().get('creation_date')) 
                for deal in deals if deal.id != 'init']
        logger.info(f"Fetched all deals: {len(result)} deals")
        return result
    except Exception as e:
        logger.error(f"Error fetching all deals: {e}")
        return []

def get_deal_type_display(deal_type):
    type_names = {
        'gift': '–ü–æ–¥–∞—Ä–æ–∫',
        'channel': '–ö–∞–Ω–∞–ª/–ß–∞—Ç',
        'stars': 'Stars',
        'nft': 'NFT Username/+888'
    }
    return type_names.get(deal_type, deal_type)

def get_deal_type_display_en(deal_type):
    type_names = {
        'gift': 'Gift',
        'channel': 'Channel/Chat',
        'stars': 'Stars',
        'nft': 'NFT Username/+888'
    }
    return type_names.get(deal_type, deal_type)

def get_user_language(user_id):
    try:
        now = time.time()
        cached = _LANG_CACHE['map'].get(user_id)
        if cached and now - cached[1] < _LANG_CACHE['ttl']:
            return cached[0]
        profile_doc = db.collection('user_profile').document(str(user_id)).get()
        profile = profile_doc.to_dict() or {}
        lang = profile.get('language', 'ru')
        _LANG_CACHE['map'][user_id] = (lang, now)
        return lang
    except Exception:
        return 'ru'

async def send_video_without_sound(chat_id, video_path, caption=None, reply_markup=None, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞"""
    try:
        with open(video_path, 'rb') as video:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é (GIF) - —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–≤—É–∫–∞
            try:
                return await bot.send_animation(chat_id, video, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode)
            except:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                return await bot.send_video(chat_id, video, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode, supports_streaming=True)
    except Exception as e:
        logger.error(f"Error sending video {video_path} to chat {chat_id}: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–∏–¥–µ–æ
        if caption:
            return await bot.send_message(chat_id, caption, reply_markup=reply_markup, parse_mode=parse_mode)
        return None

async def edit_video_message(chat_id, message_id, video_path=None, caption=None, reply_markup=None, parse_mode=None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞, –∑–∞—Ç–µ–º –ø–æ–¥–ø–∏—Å—å.
    –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–µ–¥–∏–∞), –ø—Ä–æ–±—É–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –∏–Ω–∞—á–µ False.
    """
    try:
        if video_path:
            try:
                with open(video_path, 'rb') as f:
                    media = telebot.types.InputMediaVideo(f, caption=caption, parse_mode=parse_mode)
                    await bot.edit_message_media(media=media, chat_id=chat_id, message_id=message_id, reply_markup=reply_markup)
                    return True
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                pass
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏, –µ—Å–ª–∏ –º–µ–¥–∏–∞ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=caption, reply_markup=reply_markup, parse_mode=parse_mode)
        return True
    except Exception:
        return False

def t(lang, key, **kwargs):
    ru = {
        'menu_title': "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\nüîê *–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!*\n‚ö° *–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!*\n\n*–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!* üîí",
        'btn_create_deal': "üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É",
        'btn_profile': "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        'btn_details': "üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
        'btn_support': "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        'btn_language': "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        'btn_back': "üîô –ù–∞–∑–∞–¥",
        'btn_cancel': "üö´ –û—Ç–º–µ–Ω–∏—Ç—å",
        'btn_add_details': "üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
        'details_menu_title': "üí≥ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
        'details_type_title': "üí≥ *–¢–∏–ø —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:*",
        'notice_title': "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n",
        'notice_default': "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.",
        'links_prompt_gift': "üéÅ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫(-–∏) –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:*\nhttps://—Å—Å—ã–ª–∫–∞ –∏–ª–∏ t.me/—Å—Å—ã–ª–∫–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/nft/PlushPepe-1\n\n*–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∞—Ä–∫–æ–≤, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏*",
        'links_prompt_channel': "üì¢ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ –∫–∞–Ω–∞–ª(-—ã) / —á–∞—Ç(-—ã) –≤ —Ñ–æ—Ä–º–∞—Ç–µ t.me/—Å—Å—ã–ª–∫–∞*\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/MyChannel\n\n*–ï—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.*",
        'links_prompt_stars': "‚≠ê *–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è —Å–¥–µ–ª–∫–∏ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).*\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100",
        'links_prompt_nft': "üîπ *–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É(-–∏) –Ω–∞ NFT Username/+888 –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:*\nhttps://—Å—Å—ã–ª–∫–∞ –∏–ª–∏ t.me/—Å—Å—ã–ª–∫–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\nt.me/nft/PlushPepe-1\n\n*–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ NFT, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏*",
        'currency_prompt': "üí¨ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏!*",
        'amount_prompt': "üí± *–í–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞*\n\n*–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ {currency}:*\n\n*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä. 1000)*",
        'details_input_card': "üí≥ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –µ–¥–∏–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:*\n\n*–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã*\n*–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞*\n\n–ü—Ä–∏–º–µ—Ä:\n1234 5678 9101 1121\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
        'details_input_crypto': "üíé *–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ({curr}).* –ù–∞–ø—Ä–∏–º–µ—Ä: 0x123...abc",
        'details_input_ewallet': "üí≥ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ ({curr}).* –ù–∞–ø—Ä–∏–º–µ—Ä: Qiwi +7912...",
        'details_saved': "‚úÖ *–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*",
        'profile_title': "*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n*üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {username}\n*üí∞ –ë–∞–ª–∞–Ω—Å:* {balance}\n*üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* {deals}\n\nüöÄ *–û—Å—É—â–µ—Å—Ç–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å Secure Deal ‚Äî —Å –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. ‚ö°Ô∏è*",
        'lang_change_title_ru': "üåê *–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫*\n\n*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫*\n\n–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        'lang_change_title_en': "üåê *Change language*\n\n*Choose your preferred language*\n\nCurrent: English üá¨üáß",
        'alert_need_details': "‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
        'confirm_lang_ru': "–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫",
        'confirm_lang_en': "Language: English üá¨üáß",
        'leave_deal_btn': "üö´ –ü–æ–∫–∏–Ω—É—Ç—å —Å–¥–µ–ª–∫—É",
        'pay_btn': "üí∏ –û–ø–ª–∞—Ç–∏—Ç—å ({amount} {currency})"
    }
    en = {
        'menu_title': "üëã *Welcome!*\n\nüîê *Reliable service for safe deals!*\n‚ö° *Automated, fast and hassle-free!*\n\n*Now your deals are protected!* üîí",
        'btn_create_deal': "üíº Create deal",
        'btn_profile': "üë§ My profile",
        'btn_details': "üí≥ My details",
        'btn_support': "üìû Support",
        'btn_language': "üåç Change language",
        'btn_back': "üîô Back",
        'btn_cancel': "üö´ Cancel",
        'btn_add_details': "üí≥ Add details",
        'details_menu_title': "üí≥ *Details management*\n\n*Choose an action:*",
        'details_type_title': "üí≥ *Details type*\n\n*Choose withdrawal method:*",
        'notice_title': "‚ö† Must read!\n\n",
        'notice_default': "‚ö† Must read!\n\nPlease read the info below to avoid issues.",
        'links_prompt_gift': "üéÅ *Send link(s) to gift(s) in format:*\nhttps://link or t.me/link\nExample:\nt.me/nft/PlushPepe-1\n\n*For multiple items, put each on a new line*",
        'links_prompt_channel': "üì¢ *Send link(s) to channel(s)/chat(s) in t.me/link format*\nExample:\nt.me/MyChannel\n\n*For multiple, one per line.*",
        'links_prompt_stars': "‚≠ê *Enter Stars amount (positive integer).*\nExample: 100",
        'links_prompt_nft': "üîπ *Send link(s) to NFT Username/+888 in:*\nhttps://link or t.me/link\nExample:\nt.me/nft/PlushPepe-1\n\n*For multiple items, one per line*",
        'currency_prompt': "üí¨ *Choose a currency for the deal!*",
        'amount_prompt': "üí± *Currency selected*\n\n*Amount in {currency}:*\n\n*Enter a number (e.g. 1000)*",
        'details_input_card': "üí≥ *Send your details in one message:*\n\n*Card number*\n*Full name*\n\nExample:\n1234 5678 9101 1121\nIvan Ivanov",
        'details_input_crypto': "üíé *Enter your wallet address ({curr}).* Example: 0x123...abc",
        'details_input_ewallet': "üí≥ *Enter your e-wallet number ({curr}).* Example: Qiwi +7912...",
        'details_saved': "‚úÖ *Your details were saved successfully!*",
        'profile_title': "üë§ Your profile\n\nUser: {username}\nüÜî User ID: {uid}\nüí∞ Balance: {balance}\nüèÜ Successful deals: {deals}\n\nCreate or join new deals with Secure Deal! üöÄ",
        'lang_change_title_ru': "üåê *Change language*\n\n*Choose your preferred language*\n\nCurrent: Russian üá∑üá∫",
        'lang_change_title_en': "üåê *Change language*\n\n*Choose your preferred language*\n\nCurrent: English üá¨üáß",
        'alert_need_details': "‚ö† You need to add payout details to create a deal.",
        'confirm_lang_ru': "Language: Russian üá∑üá∫",
        'confirm_lang_en': "Language: English üá¨üáß",
        'leave_deal_btn': "üö´ Leave deal",
        'pay_btn': "üí∏ Pay ({amount} {currency})"
    }
    d = en if lang == 'en' else ru
    s = d.get(key, '')
    return s.format(**kwargs)

def is_banned_from_admin(user_id):
    try:
        profile_doc = db.collection('user_profile').document(str(user_id)).get()
        profile = profile_doc.to_dict() or {}
        banned = profile.get('is_banned_from_admin', 0)
        logger.info(f"Checked ban status for user {user_id}: {banned}")
        return banned
    except Exception as e:
        logger.error(f"Error checking ban status for {user_id}: {e}")
        return 0

def set_banned_from_admin(user_id, banned):
    try:
        profile_ref = db.collection('user_profile').document(str(user_id))
        profile_ref.update({'is_banned_from_admin': banned})
        logger.info(f"Set ban status for user {user_id}: {banned}")
    except Exception as e:
        logger.error(f"Error setting ban status for {user_id}: {e}")

async def complete_deal_join(chat_id, user_id, user_username, deal_id):
    try:
        deal_ref = db.collection('deals').document(str(deal_id))
        deal = deal_ref.get().to_dict()
        if deal:
            deal_ref.update({
                'participant_id': user_id,
                'participant_username': user_username,
                'status': 'in_progress'
            })
            logger.info(f"Updated deal {deal_id} with participant {user_id}")
            
            creator_id = deal['creator_id']
            creator_username = deal['creator_username']
            deal_type = deal['deal_type']
            item_links = deal['item_links']
            currency = deal['currency']
            amount = deal['amount']
            
            creator_details = get_user_details(creator_id)
            creator_rating = get_user_rating(creator_id)
            buyer_rating = get_user_rating(user_id)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            def escape_markdown_v2(text):
                if not text:
                    return text
                
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                text = text.replace('\\', '')
                
                escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
                for char in escape_chars:
                    text = text.replace(char, f'\\{char}')
                return text
            
            participant_display_name = f"@{user_username}" if user_username else f"ID{user_id}"
            creator_display_name = f"@{creator_username}" if creator_username else f"ID{creator_id}"
            
            escaped_participant_name = escape_markdown_v2(participant_display_name)
            escaped_creator_name = escape_markdown_v2(creator_display_name)
            escaped_creator_details = escape_markdown_v2(creator_details)
            escaped_item_links = escape_markdown_v2(item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            lang = get_user_language(chat_id)
            def escape_html(text):
                if text is None:
                    return ''
                return str(text).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

            participant_link_html = f"<a href='tg://user?id={user_id}'>" + escape_html(participant_display_name) + "</a>"
            creator_link_html = f"<a href='tg://user?id={creator_id}'>" + escape_html(creator_display_name) + "</a>"
            item_links_html = escape_html(item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            creator_details_html = escape_html(creator_details)

            if lang == 'en':
                deal_info_text = (
                    f"‚Ñπ <b>Deal info</b>\n"
                    f"<code>#{deal_id}</code>\n\n"
                    f"üë§ Buyer: {participant_link_html}\n"
                    f"üèÜ Buyer rating: <b>{buyer_rating}</b>\n\n"
                    f"üë§ Seller: {creator_link_html}\n"
                    f"üèÜ Seller rating: <b>{creator_rating}</b>\n\n"
                    f"<b>{escape_html(get_deal_type_display_en(deal_type))}:</b>\n"
                    f"{item_links_html}\n\n"
                    f"üí≥ <b>Payment details:</b>\n"
                    f"Details: {creator_details_html}\n"
                    f"üí∞ Amount: <b>{amount} {currency}</b>\n"
                    f"üíé TON: <b>{amount * 0.00375:.2f} TON</b>\n"
                    f"üìù Comment: <code>{deal_id}</code>\n\n"
                    f"‚ö† <b>Make sure details are correct before paying!</b>"
                )
            else:
                deal_info_text = (
                    f"‚Ñπ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ</b>\n"
                    f"<code>#{deal_id}</code>\n\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link_html}\n"
                    f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: <b>{buyer_rating}</b>\n\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_link_html}\n"
                    f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: <b>{creator_rating}</b>\n\n"
                    f"<b>{escape_html(get_deal_type_display(deal_type))}:</b>\n"
                    f"{item_links_html}\n\n"
                    f"üí≥ <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
                    f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {creator_details_html}\n"
                    f"üí∞ –°—É–º–º–∞: <b>{amount} {currency}</b>\n"
                    f"üíé TON: <b>{amount * 0.00375:.2f} TON</b>\n"
                    f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{deal_id}</code>\n\n"
                    f"‚ö† <b>–í–Ω–∏–º–∞–Ω–∏–µ! –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π!</b>"
                )
            
            await send_video_without_sound(
                chat_id, 
                'assets/6.mp4', 
                caption=deal_info_text, 
                parse_mode='HTML', 
                reply_markup=get_payment_keyboard(deal_id, amount, currency, user_id)
            )
            
            participant_link = f"[{escaped_participant_name}](tg://user?id={user_id})"
            if lang == 'en':
                seller_notification = (
                    f"üë§ <b>New participant!</b> {participant_link_html}\n\n"
                    f"üèÜ <b>Completed deals:</b> {get_user_rating(user_id)}\n\n"
                    f"üîç <b>Check it is the same user.</b>\n\n"
                    f"‚è≥ <b>You will get further instructions after payment.</b>"
                )
            else:
                seller_notification = (
                    f"üë§ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–¥–µ–ª–∫–∏!</b> {participant_link_html}\n\n"
                    f"üèÜ <b>–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {get_user_rating(user_id)}\n\n"
                    f"üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
                    f"‚è≥ <b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.</b>"
                )
            
            await send_video_without_sound(
                creator_id, 
                'assets/6.mp4', 
                caption=seller_notification, 
                parse_mode='HTML', 
                reply_markup=get_in_deal_keyboard(deal_id, 'in_progress')
            )
        else:
            logger.error(f"Deal {deal_id} not found for join")
            await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error in complete_deal_join for deal {deal_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–¥–µ–ª–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

def get_user_rating(user_id):
    try:
        profile_doc = db.collection('user_profile').document(str(user_id)).get()
        profile = profile_doc.to_dict() or {}
        rating = profile.get('successful_deals', 0)
        logger.info(f"Fetched rating for user {user_id}: {rating}")
        return rating
    except Exception as e:
        logger.error(f"Error fetching rating for {user_id}: {e}")
        return 0

@bot.message_handler(commands=['start'])
async def send_welcome(message):
    try:
        profile_ref = db.collection('user_profile').document(str(message.from_user.id))
        if not profile_ref.get().exists:
            profile_ref.set({
                'user_id': message.from_user.id,
                'username': message.from_user.username,
                'balance': 0.0,
                'successful_deals': 0,
                'language': 'ru',
                'is_banned_from_admin': 0
            })
            logger.info(f"Created profile for user {message.from_user.id}")

        args = message.text.split()
        if len(args) > 1 and args[1].startswith('deal_'):
            deal_id = args[1].replace('deal_', '')
            await handle_join_deal(message, deal_id)
        else:
            await show_main_menu(message.chat.id, message.from_user.first_name)
    except Exception as e:
        logger.error(f"Error in send_welcome for user {message.from_user.id}: {e}")
        await bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

@bot.message_handler(commands=['givemeworkerppp'])
async def handle_givemeworkerppp(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        user_mention = f"<a href='tg://user?id={user_id}'>@{username}</a>" if message.from_user.username else f"<a href='tg://user?id={user_id}'>ID{user_id}</a>"
        try:
            if is_banned_from_admin(user_id):
                await bot.reply_to(message, f"üö´ {user_mention}, –≤—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å.", parse_mode='HTML')
                return
            admin_ids = get_admin_ids()
            if user_id not in admin_ids:
                admin_ids.append(user_id)
                db.collection('admin_ids').document('init').update({'ids': admin_ids})
                logger.info(f"Added admin {user_id}")
                await bot.reply_to(message, f"üéâ {user_mention}, –≤–∞–º –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ –æ–ø–ª–∞—Ç—ã.", parse_mode='HTML')
            else:
                await bot.reply_to(message, f"üòï {user_mention}, –≤—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error in givemeworkerppp for user {user_id}: {e}")
            await bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['off'])
async def handle_remove_admin(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        if message.from_user.id not in OFF_IDS:
            await bot.reply_to(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            args = message.text.split()
            if len(args) < 2:
                await bot.reply_to(message, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /off 123456789")
                return
            target_user_id = int(args[1])
            user_mention = f"<a href='tg://user?id={message.from_user.id}'>@{message.from_user.username or 'ID' + str(message.from_user.id)}</a>"
            admin_ids = get_admin_ids()
            if target_user_id not in admin_ids:
                await bot.reply_to(message, f"üòï {user_mention}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
                return
            admin_ids.remove(target_user_id)
            db.collection('admin_ids').document('init').update({'ids': admin_ids})
            reset_user_data(target_user_id)
            set_banned_from_admin(target_user_id, 1)
            logger.info(f"Removed admin {target_user_id} and banned")
            await bot.reply_to(message, f"‚úÖ {user_mention}, —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_user_id}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω—É–ª–µ–Ω—ã.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"Error in handle_remove_admin: {e}")
            await bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['onn'])
async def handle_add_admin(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        if message.from_user.id not in OFF_IDS:
            await bot.reply_to(message, "‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        try:
            args = message.text.split()
            if len(args) < 2:
                await bot.reply_to(message, "‚ö† –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /onn 123456789")
                return
            target_user_id = int(args[1])
            user_mention = f"<a href='tg://user?id={message.from_user.id}'>@{message.from_user.username or 'ID' + str(message.from_user.id)}</a>"
            admin_ids = get_admin_ids()
            if target_user_id in admin_ids:
                await bot.reply_to(message, f"üòï {user_mention}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='HTML')
                return
            admin_ids.append(target_user_id)
            db.collection('admin_ids').document('init').update({'ids': admin_ids})
            set_banned_from_admin(target_user_id, 0)
            logger.info(f"Added admin {target_user_id}")
            await bot.reply_to(message, f"üéâ {user_mention}, —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"Error in handle_add_admin: {e}")
            await bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['setmedealsmnogo'])
async def handle_setmedealsmnogo(message):
    if message.chat.id == GROUP_ID and getattr(message, 'message_thread_id', None) == TOPIC_ID:
        user_id = message.from_user.id
        username = message.from_user.username or f"ID{user_id}"
        user_mention = f"<a href='tg://user?id={user_id}'>@{username}</a>" if message.from_user.username else f"<a href='tg://user?id={user_id}'>ID{user_id}</a>"
        try:
            args = message.text.split()
            if len(args) < 2:
                await bot.reply_to(message, f"‚ö† {user_mention}, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫. –ü—Ä–∏–º–µ—Ä: /setmedealsmnogo 10", parse_mode='HTML')
                return
            deals_count = int(args[1])
            if deals_count < 0:
                raise ValueError
            profile_ref = db.collection('user_profile').document(str(user_id))
            profile_ref.update({'successful_deals': deals_count})
            logger.info(f"Set successful deals for user {user_id}: {deals_count}")
            await bot.reply_to(message, f"‚úÖ {user_mention}, –≤–∞—à —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {deals_count}.", parse_mode='HTML')
        except ValueError:
            await bot.reply_to(message, f"‚ö† {user_mention}, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫.", parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error in setmedealsmnogo for user {user_id}: {e}")
            await bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–¥–µ–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
    else:
        await bot.reply_to(message, f"‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ —Å ID {GROUP_ID} –≤ —Ç–µ–º–µ —Å ID {TOPIC_ID}.")

@bot.message_handler(commands=['sdelky'])
async def handle_sdelky(message):
    if message.from_user.id not in OFF_IDS:
        return
    try:
        deals = get_all_deals()
        if not deals:
            await bot.reply_to(message, "üòï –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
            return
        await bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫:", reply_markup=get_deals_keyboard(deals))
    except Exception as e:
        logger.error(f"Error in handle_sdelky: {e}")
        await bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

async def handle_join_deal(message, deal_id):
    try:
        deal = get_deal_data(deal_id)
        
        if not deal:
            await bot.send_message(message.chat.id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        creation_date = float(deal[10])
        if time.time() - creation_date > 600:
            creator_id = deal[1]
            creator_username = deal[2]
            deal_type = deal[5]
            currency = deal[7]
            amount = deal[8]
            
            creator_details = get_user_details(creator_id)
            
            notification_text = (
                f"‚è∞ –°–¥–µ–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
                f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                f"üì¶ –¢–∏–ø: {get_deal_type_display(deal_type)}\n"
                f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
                f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {creator_details}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –Ω–µ—Ç üö´"
            )
            
            await bot.send_message(GROUP_ID, notification_text, message_thread_id=TOPIC_ID, parse_mode='HTML')
            await send_video_without_sound(creator_id, 'assets/1.mp4', caption=notification_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
            
            if deal[3]:
                await send_video_without_sound(deal[3], 'assets/1.mp4', caption=notification_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
            
            deal_ref = db.collection('deals').document(str(deal_id))
            deal_ref.update({'status': 'expired'})
            await send_video_without_sound(message.chat.id, 'assets/1.mp4', caption="‚è∞ –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=get_main_menu_keyboard())
            return

        if not check_user_details(message.from_user.id):
            await bot.set_state(message.from_user.id, UserStates.AwaitingDetailsInput, message.chat.id)
            async with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['pending_deal_id'] = deal_id
            await send_video_without_sound(message.chat.id, 'assets/1.mp4', caption="‚ö† –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", reply_markup=get_add_details_keyboard())
            return

        if deal[1] == message.from_user.id:
            await bot.send_message(message.chat.id, "üòï –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ!")
            return
            
        if deal[3] is not None:
            await bot.send_message(message.chat.id, "üòï –ö —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.")
            return
            
        await complete_deal_join(message.chat.id, message.from_user.id, message.from_user.username, deal_id)
    except Exception as e:
        logger.error(f"Error in handle_join_deal for deal {deal_id}: {e}")
        await bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–¥–µ–ª–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

async def show_main_menu(chat_id, user_name):
    try:
        await bot.delete_state(chat_id, chat_id)
        lang = get_user_language(chat_id)
        menu_text = t(lang, 'menu_title')
        
        await send_video_without_sound(chat_id, 'assets/1.mp4', caption=menu_text, reply_markup=get_main_menu_keyboard(lang), parse_mode='Markdown')
        
        logger.info(f"Displayed main menu for chat {chat_id}")
    except Exception as e:
        logger.error(f"Error in show_main_menu for chat {chat_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

NOTICE = "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n"
GIFT_NOTICE_BODY = (
    "*‚ÄºÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!*\n\n"
    "*–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp.*\n\n"
    "*–ï—Å–ª–∏ NFT username/+888 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:*\n"
    "‚Ä¢ –û–Ω–∏ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã üòî\n"
    "‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–∏ username/+888 –∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ üí∏\n\n"
    "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
)
CHANNEL_NOTICE_BODY = (
    "*‚ÄºÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!*\n\n"
    "*–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp.*\n\n"
    "*–ï—Å–ª–∏ –ö–∞–Ω–∞–ª—ã/–ß–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:*\n"
    "‚Ä¢ –û–Ω–∏ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã üòî\n"
    "‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–∏ –ö–∞–Ω–∞–ª–æ–≤/–ß–∞—Ç–æ–≤ –∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ üí∏\n\n"
    "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
)
STARS_NOTICE_BODY = (
    "*‚ÄºÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!*\n\n"
    "*–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp.*\n\n"
    "*–ï—Å–ª–∏ –∑–≤—ë–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:*\n"
    "‚Ä¢ –û–Ω–∏ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã üòî\n"
    "‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–µ–π—Å—è, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–æ—Ç–µ—Ä–∏ –∑–≤—ë–∑–¥ –∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ üí∏\n\n"
    "–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @GiftGuarantHelp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
)
NFT_NOTICE_BODY = GIFT_NOTICE_BODY
NOTICES = {
    'gift': GIFT_NOTICE_BODY,
    'channel': NOTICE + CHANNEL_NOTICE_BODY,
    'stars': NOTICE + STARS_NOTICE_BODY,
    'nft': NFT_NOTICE_BODY,
}

@bot.callback_query_handler(func=lambda call: True)
async def handle_callback_query(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    logger.info(f"Handling callback query {call.data} for user {user_id}")
    
    try:
        if call.data == "main_menu":
            # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            lang = get_user_language(chat_id)
            menu_text = t(lang, 'menu_title')
            edited = await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=menu_text, reply_markup=get_main_menu_keyboard(lang), parse_mode='Markdown')
            if not edited:
                await show_main_menu(chat_id, call.from_user.first_name)
        elif call.data == "create_deal":
            if not check_user_details(call.from_user.id):
                await bot.answer_callback_query(call.id, "‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", show_alert=True)
                await send_video_without_sound(chat_id, 'assets/1.mp4', caption="‚ö† –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.", reply_markup=get_add_details_keyboard())
                return
            await bot.set_state(call.from_user.id, UserStates.AwaitingDealType, chat_id)
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                data['deal_data'] = {}
            text = "üí≠ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏!*"
            if not await edit_video_message(chat_id, message_id, video_path='assets/2.mp4', caption=text, reply_markup=get_deal_type_keyboard(), parse_mode='Markdown'):
                await send_video_without_sound(chat_id, 'assets/2.mp4', caption=text, reply_markup=get_deal_type_keyboard(), parse_mode='Markdown')
        elif call.data.startswith("deal_type_"):
            deal_type = call.data.split('_')[-1]
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ deal_data
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                if 'deal_data' not in data or not isinstance(data.get('deal_data'), dict):
                    data['deal_data'] = {}
                data['deal_data']['type'] = deal_type
            await bot.set_state(call.from_user.id, UserStates.AwaitingNotice, chat_id)
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                data['deal_type'] = deal_type
            notice_text = NOTICES.get(deal_type, "‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º.")
            if not await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=notice_text, reply_markup=get_notice_keyboard(deal_type, get_user_language(chat_id)), parse_mode='Markdown'):
                await send_video_without_sound(chat_id, 'assets/1.mp4', caption=notice_text, reply_markup=get_notice_keyboard(deal_type, get_user_language(chat_id)), parse_mode='Markdown')
        elif call.data.startswith("notice_read_"):
            deal_type = call.data.split('_')[-1]
            await bot.set_state(call.from_user.id, UserStates.AwaitingLinks, chat_id)
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                data['deal_type'] = deal_type
            lang_cur = get_user_language(chat_id)
            link_text_map = {
                'gift': t(lang_cur, 'links_prompt_gift'),
                'channel': t(lang_cur, 'links_prompt_channel'),
                'stars': t(lang_cur, 'links_prompt_stars'),
                'nft': t(lang_cur, 'links_prompt_nft')
            }
            link_text = link_text_map.get(deal_type, t(lang_cur, 'links_prompt_gift'))
            if not await edit_video_message(chat_id, message_id, video_path='assets/3.mp4', caption=link_text, reply_markup=get_links_keyboard(deal_type, get_user_language(chat_id)), parse_mode='Markdown'):
                sent_msg = await send_video_without_sound(chat_id, 'assets/3.mp4', caption=link_text, reply_markup=get_links_keyboard(deal_type, get_user_language(chat_id)), parse_mode='Markdown')
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = sent_msg.message_id
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π message_id –∫–∞–∫ –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = message_id
        elif call.data.startswith("currency_"):
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                currency = call.data.split('_')[-1]
                data['deal_data']['currency'] = currency
            await bot.set_state(call.from_user.id, UserStates.AwaitingAmount, chat_id)
            text = t(get_user_language(chat_id), 'amount_prompt', currency=currency)
            if not await edit_video_message(chat_id, message_id, video_path='assets/3.mp4', caption=text, reply_markup=get_cancel_keyboard(get_user_language(chat_id)), parse_mode='Markdown'):
                sent_msg = await send_video_without_sound(chat_id, 'assets/3.mp4', caption=text, reply_markup=get_cancel_keyboard(get_user_language(chat_id)), parse_mode='Markdown')
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = sent_msg.message_id
            else:
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = message_id
        elif call.data == "my_details":
            if not await edit_video_message(chat_id, message_id, video_path='assets/7.mp4', caption=t(get_user_language(chat_id), 'details_menu_title'), reply_markup=get_details_menu_keyboard(get_user_language(chat_id)), parse_mode='Markdown'):
                await send_video_without_sound(chat_id, 'assets/7.mp4', caption=t(get_user_language(chat_id), 'details_menu_title'), reply_markup=get_details_menu_keyboard(get_user_language(chat_id)), parse_mode='Markdown')
        elif call.data == "add_details":
            await bot.set_state(call.from_user.id, UserStates.AwaitingDetailsType, chat_id)
            if not await edit_video_message(chat_id, message_id, video_path='assets/7.mp4', caption=t(get_user_language(chat_id), 'details_type_title'), reply_markup=get_details_type_keyboard(), parse_mode='Markdown'):
                await send_video_without_sound(chat_id, 'assets/7.mp4', caption=t(get_user_language(chat_id), 'details_type_title'), reply_markup=get_details_type_keyboard(), parse_mode='Markdown')
        elif call.data.startswith("details_type_"):
            async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                details_type = call.data.split('_')[2]
                details_currency = call.data.split('_')[-1]
                data['details_type'] = f"{details_type}_{details_currency}"
                logger.info(f"Set details_type for user {call.from_user.id}: {details_type}_{details_currency}")
            await bot.set_state(call.from_user.id, UserStates.AwaitingDetailsInput, chat_id)
            lang_cur = get_user_language(chat_id)
            input_prompt = t(lang_cur, 'details_input_card')
            if details_type == 'crypto':
                input_prompt = t(lang_cur, 'details_input_crypto', curr=details_currency)
            elif details_type == 'ewallet':
                input_prompt = t(lang_cur, 'details_input_ewallet', curr=details_currency)
            if not await edit_video_message(chat_id, message_id, video_path='assets/7.mp4', caption=input_prompt, reply_markup=get_cancel_keyboard(), parse_mode='Markdown'):
                sent_msg = await send_video_without_sound(chat_id, 'assets/7.mp4', caption=input_prompt, reply_markup=get_cancel_keyboard(), parse_mode='Markdown')
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = sent_msg.message_id
                    logger.info(f"Set prompt_message_id for user {call.from_user.id}: {sent_msg.message_id}")
            else:
                async with bot.retrieve_data(call.from_user.id, chat_id) as data:
                    data['prompt_message_id'] = message_id
                    logger.info(f"Set prompt_message_id for user {call.from_user.id}: {message_id}")
        elif call.data == "view_details":
            details = get_user_details(call.from_user.id)
            await bot.answer_callback_query(call.id, f"üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {details}", show_alert=True)
        elif call.data == "clear_details":
            try:
                db.collection('user_details').document(str(call.from_user.id)).delete()
                logger.info(f"Cleared details for user {call.from_user.id}")
                await bot.answer_callback_query(call.id, "üóë –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", show_alert=True)
            except Exception as e:
                logger.error(f"Error clearing details for user {call.from_user.id}: {e}")
                await bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.", show_alert=True)
        elif call.data == "my_profile":
            try:
                profile_ref = db.collection('user_profile').document(str(call.from_user.id))
                if not profile_ref.get().exists:
                    profile_ref.set({
                        'user_id': call.from_user.id,
                        'username': call.from_user.username,
                        'balance': 0.0,
                        'successful_deals': 0,
                        'language': 'ru',
                        'is_banned_from_admin': 0
                    })
                profile = profile_ref.get().to_dict()
                username = profile.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                balance = profile.get('balance', 0.0)
                successful_deals = profile.get('successful_deals', 0)
                
                admin_ids = get_admin_ids()
                balance_text = "‚àû" if call.from_user.id in admin_ids else f"{balance:.2f}"
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã; –¥–æ–±–∞–≤–ª—è–µ–º @ –∫ username
                display_username = f"@{username}" if username else '–ë–µ–∑ –∏–º–µ–Ω–∏'
                escaped_username = escape_markdown_v2(display_username)
                
                text = (
                    "*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
                    f"*üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escaped_username}\n"
                    f"*üí∞ –ë–∞–ª–∞–Ω—Å:* `{balance_text}`\n"
                    f"*üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* `{successful_deals}`\n\n"
                    f"üöÄ *–û—Å—É—â–µ—Å—Ç–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å Secure Deal ‚Äî —Å –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. ‚ö°Ô∏è*"
                )
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                if not await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=text, reply_markup=get_profile_keyboard(get_user_language(chat_id)), parse_mode='Markdown'):
                    await send_video_without_sound(
                        chat_id, 
                        'assets/1.mp4', 
                        caption=text, 
                        reply_markup=get_profile_keyboard(get_user_language(chat_id)), 
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"Error in my_profile for user {call.from_user.id}: {e}")
                await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
        elif call.data == "change_language":
            current_lang = get_user_language(call.from_user.id)
            if current_lang == 'en':
                text = (
                    "üåê Change language\n\n"
                    "Choose your preferred language\n\n"
                    "Current: English üá¨üáß"
                )
            else:
                text = (
                    "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫\n\n"
                    "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫"
                )
            if not await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=text, reply_markup=get_language_keyboard(get_user_language(chat_id))):
                await send_video_without_sound(chat_id, 'assets/1.mp4', caption=text, reply_markup=get_language_keyboard(get_user_language(chat_id)))
        elif call.data == "lang_ru":
            try:
                db.collection('user_profile').document(str(call.from_user.id)).update({'language': 'ru'})
            except Exception:
                pass
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —è–∑—ã–∫–∞, —á—Ç–æ–±—ã –Ω–µ "–æ—Ç–∫–∞—Ç—ã–≤–∞–ª—Å—è"
            _LANG_CACHE['map'].pop(call.from_user.id, None)
            await bot.answer_callback_query(call.id, "–Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫", show_alert=False)
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            lang = 'ru'
            menu_text = t(lang, 'menu_title')
            if not await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=menu_text, reply_markup=get_main_menu_keyboard(lang), parse_mode='Markdown'):
                await show_main_menu(chat_id, call.from_user.first_name)
        elif call.data == "lang_en":
            try:
                db.collection('user_profile').document(str(call.from_user.id)).update({'language': 'en'})
            except Exception:
                pass
            _LANG_CACHE['map'].pop(call.from_user.id, None)
            await bot.answer_callback_query(call.id, "Language: English üá¨üáß", show_alert=False)
            lang = 'en'
            menu_text = t(lang, 'menu_title')
            if not await edit_video_message(chat_id, message_id, video_path='assets/1.mp4', caption=menu_text, reply_markup=get_main_menu_keyboard(lang), parse_mode='Markdown'):
                await show_main_menu(chat_id, call.from_user.first_name)
        elif call.data.startswith("pay_from_balance_"):
            deal_id = call.data.split('_')[-1]
            await handle_pay_from_balance(chat_id, call.from_user.id, deal_id, message_id)
        elif call.data.startswith("complete_deal_"):
            deal_id = call.data.split('_')[-1]
            await handle_complete_deal(chat_id, call.from_user.id, deal_id, message_id)
        elif call.data.startswith("leave_deal_"):
            deal_id = call.data.split('_')[-1]
            await handle_leave_deal(chat_id, call.from_user.id, deal_id)
        elif call.data.startswith("view_deal_"):
            deal_id = call.data.split('_')[-1]
            deal = get_deal_data(deal_id)
            if deal:
                creator_id, creator_username, participant_id, participant_username, status, creation_date = deal[1], deal[2], deal[3], deal[4], deal[9], deal[10]
                creator_display = f"@{creator_username}" if creator_username else f"ID{creator_id}"
                participant_display = f"@{participant_username}" if participant_username else f"ID{participant_id}" if participant_id else "–ù–µ—Ç"
                creation_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(creation_date))
                successful = "—É—Å–ø–µ—à–Ω–æ ‚úÖ" if status == 'completed' else "–Ω–µ—Ç üö´"
                text = (
                    f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ {deal_id}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_date}\n"
                    f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_display}\n"
                    f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_display}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful}"
                )
                await bot.answer_callback_query(call.id, text, show_alert=True)
    except Exception as e:
        logger.error(f"Error in handle_callback_query {call.data} for user {user_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

def get_transfer_item_name(deal_type):
    names = {
        'gift': '–ø–æ–¥–∞—Ä–æ–∫',
        'channel': '–∫–∞–Ω–∞–ª/—á–∞—Ç',
        'stars': 'Stars',
        'nft': 'NFT Username/+888'
    }
    return names.get(deal_type, '—Ç–æ–≤–∞—Ä')

async def handle_pay_from_balance(chat_id, user_id, deal_id, message_id):
    try:
        deal_ref = db.collection('deals').document(str(deal_id))
        deal = deal_ref.get().to_dict()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ 'in_progress'
        if not deal:
            await send_video_without_sound(chat_id, 'assets/1.mp4', caption="üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
            return
        
        if deal['participant_id'] != user_id:
            await send_video_without_sound(chat_id, 'assets/1.mp4', caption="üòï –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.", reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
            return

        amount = deal['amount']
        currency = deal['currency']
        creator_id = deal['creator_id']
        creator_username = deal['creator_username']
        deal_type = deal['deal_type']
        
        # –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Markdown V2
        def escape_markdown_v2(text):
            if not text:
                return text
            
            # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            text = text.replace('\\', '')
            
            escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
            for char in escape_chars:
                text = text.replace(char, f'\\{char}')
            return text
        
        admin_ids = get_admin_ids()
        if user_id not in admin_ids:
            user_balance = get_user_balance(user_id)
            if user_balance < amount and currency not in ['Stars', 'TON']:
                await send_video_without_sound(chat_id, 'assets/1.mp4', caption="‚ö† *–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ*", parse_mode='Markdown', reply_markup=get_in_deal_keyboard(deal_id, 'in_progress'))
                return
            update_user_balance(user_id, -amount)

        deal_ref.update({'status': 'paid'})
        logger.info(f"Deal {deal_id} marked as paid")
        
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        escaped_deal_id = escape_markdown_v2(deal_id)
        escaped_amount = escape_markdown_v2(str(amount))
        escaped_currency = escape_markdown_v2(currency)
        
        await send_video_without_sound(
            chat_id, 
            'assets/1.mp4', 
            caption=f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–¥–µ–ª–∫—É</b> <code>#{escaped_deal_id}</code>. <b>–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø–µ—Ä–µ–¥–∞—Å—Ç —Ç–æ–≤–∞—Ä –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É @GiftGuarantHelp</b>", 
            reply_markup=get_paid_keyboard(deal_id), 
            parse_mode='HTML'
        )
        
        participant_username = get_username_by_id(user_id)
        participant_display_name = f"@{participant_username}" if participant_username else f"ID{user_id}"
        participant_link_html = f"<a href='tg://user?id={user_id}'>" + (participant_display_name) + "</a>"

        item_name = get_transfer_item_name(deal_type)

        seller_message_html = (
            f"üí∏ <b>–°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n\n"
            f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b>: {participant_link_html} <b>–æ–ø–ª–∞—Ç–∏–ª</b> <code>{escaped_amount} {escaped_currency}</code>\n\n"
            f"üì¶ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–π—Ç–µ {item_name} –ø–æ–¥–¥–µ—Ä–∂–∫–µ @GiftGuarantHelp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.</b>\n"
            f"üí∞ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ</b> <code>{escaped_amount} {escaped_currency}</code> <b>–±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è @GiftGuarantHelp.</b>\n"
        )

        keyboard = telebot.types.InlineKeyboardMarkup()
        transfer_btn = telebot.types.InlineKeyboardButton(f"‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª {item_name}", callback_data=f"complete_deal_{deal_id}")
        keyboard.add(transfer_btn)

        await send_video_without_sound(
            creator_id, 
            'assets/1.mp4', 
            caption=seller_message_html, 
            reply_markup=keyboard, 
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error in handle_pay_from_balance for deal {deal_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Å–¥–µ–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

def get_username_by_id(user_id):
    try:
        profile_doc = db.collection('user_profile').document(str(user_id)).get()
        profile = profile_doc.to_dict() or {}
        username = profile.get('username')
        logger.info(f"Fetched username for user {user_id}: {username}")
        return username
    except Exception as e:
        logger.error(f"Error fetching username for {user_id}: {e}")
        return None

async def handle_complete_deal(chat_id, user_id, deal_id, message_id):
    try:
        deal = get_deal_data(deal_id)
        
        if not deal:
            await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
            return

        deal_id, creator_id, creator_username, participant_id, participant_username, deal_type, item_links, currency, amount, status, creation_date = deal
        
        if status != 'paid':
            await send_video_without_sound(chat_id, 'assets/1.mp4', caption="‚ö† –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞.", reply_markup=get_in_deal_keyboard(deal_id, status))
            return

        update_user_balance(creator_id, amount)
        increment_successful_deals(creator_id)
        increment_successful_deals(participant_id)
        
        db.collection('deals').document(str(deal_id)).update({'status': 'completed'})
        logger.info(f"Deal {deal_id} completed")

        creator_link = f"<a href='tg://user?id={creator_id}'>@{creator_username or 'ID' + str(creator_id)}</a>"
        participant_link = f"<a href='tg://user?id={participant_id}'>@{participant_username or 'ID' + str(participant_id)}</a>"
        deal_notification = (
            f"üéâ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üì¶ –¢–∏–ø: {get_deal_type_display(deal_type)}\n"
            f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
            f"üìã –¢–æ–≤–∞—Ä/–ü–æ–¥–∞—Ä–æ–∫: {item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_link}\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –¥–∞"
        )
        await bot.send_message(GROUP_ID, deal_notification, message_thread_id=TOPIC_ID, parse_mode='HTML')
        
        try:
            await bot.delete_message(chat_id, message_id)
        except:
            pass
        
        await bot.send_message(creator_id, "*üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*", parse_mode='Markdown')
        await bot.send_message(participant_id, "*üéâ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error in handle_complete_deal for deal {deal_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

async def handle_leave_deal(chat_id, user_id, deal_id):
    try:
        deal = get_deal_data(deal_id)
        if not deal:
            await bot.send_message(chat_id, "üòï –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        deal_id, creator_id, creator_username, participant_id, participant_username, deal_type, item_links, currency, amount, status, creation_date = deal
        
        if status == 'paid':
            await bot.send_message(chat_id, "‚ö† –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–¥–µ–ª–∫–∏ –≤—ã—Ö–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return

        if user_id != creator_id and user_id != participant_id:
            await bot.send_message(chat_id, "üòï –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
            return

        db.collection('deals').document(str(deal_id)).update({'status': 'cancelled'})
        logger.info(f"Deal {deal_id} cancelled")

        creator_link = f"<a href='tg://user?id={creator_id}'>@{creator_username or 'ID' + str(creator_id)}</a>"
        participant_link = f"<a href='tg://user?id={participant_id}'>@{participant_username or 'ID' + str(participant_id)}</a>" if participant_id else "–ù–µ—Ç"
        message_text = (
            f"üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: {deal_id}\n"
            f"üì¶ –¢–∏–ø: {get_deal_type_display(deal_type)}\n"
            f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
            f"üìã –¢–æ–≤–∞—Ä/–ü–æ–¥–∞—Ä–æ–∫: {item_links or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_link}\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {participant_link}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞: –Ω–µ—Ç üö´"
        )
        
        await bot.send_message(GROUP_ID, message_text, message_thread_id=TOPIC_ID, parse_mode='HTML')
        await send_video_without_sound(creator_id, 'assets/1.mp4', caption=message_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())

        if participant_id:
            await send_video_without_sound(participant_id, 'assets/1.mp4', caption=message_text, parse_mode='HTML', reply_markup=get_main_menu_keyboard())
        
        await send_video_without_sound(chat_id, 'assets/1.mp4', caption="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Å–¥–µ–ª–∫—É.", reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error in handle_leave_deal for deal {deal_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–¥–µ–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

@bot.message_handler(state=UserStates.AwaitingLinks, content_types=['text'])
async def handle_links(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    logger.info(f"Handling links input for user {user_id}")
    try:
        async with bot.retrieve_data(user_id, chat_id) as data:
            deal_type = data.get('deal_type')
            prompt_message_id = data.get('prompt_message_id')
        if not deal_type:
            logger.warning(f"No deal_type in state for user {user_id}")
            await show_main_menu(chat_id, message.from_user.first_name)
            return
        is_valid, error_message = validate_links(deal_type, message.text)
        if not is_valid:
            sent_msg = await bot.reply_to(message, error_message)
            async with bot.retrieve_data(user_id, chat_id) as data:
                data['prompt_message_id'] = sent_msg.message_id
            return
        async with bot.retrieve_data(user_id, chat_id) as data:
            data['deal_data']['links'] = message.text.strip()
        await bot.set_state(user_id, UserStates.AwaitingCurrency, chat_id)
        try:
            await bot.delete_message(chat_id, prompt_message_id)
            await bot.delete_message(chat_id, message.message_id)
        except Exception as e:
            logger.error(f"Error deleting messages in handle_links for user {user_id}: {e}")
        text = t(get_user_language(chat_id), 'currency_prompt')
        await send_video_without_sound(chat_id, 'assets/4.mp4', caption=text, reply_markup=get_currency_keyboard(get_user_language(chat_id)), parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error in handle_links for user {user_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

@bot.message_handler(state=UserStates.AwaitingAmount, content_types=['text'])
async def handle_amount(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    logger.info(f"Handling amount input for user {user_id}")
    try:
        async with bot.retrieve_data(user_id, chat_id) as data:
            prompt_message_id = data.get('prompt_message_id')
        if not prompt_message_id:
            logger.warning(f"No prompt_message_id in state for user {user_id}")
            # –ù–µ —É—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é. –ü—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try:
            amount = float(message.text)
            if amount <= 0:
                raise ValueError
        except ValueError:
            sent_msg = await bot.reply_to(message, "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä. 1000).")
            async with bot.retrieve_data(user_id, chat_id) as data:
                data['prompt_message_id'] = sent_msg.message_id
            return
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É–º–º–æ–π
        try:
            await bot.delete_message(chat_id, message.message_id)
        except Exception:
            pass
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –ø–æ–¥ —Å—É–º–º—É –Ω–∞ –∏—Ç–æ–≥ —Å–¥–µ–ª–∫–∏
        try:
            preview_text = (
                f"üéâ *–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è...*\n\n"
                f"üí∞ *–°—É–º–º–∞:* `{amount}`\n"
                f"‚è≥ *–ú–æ–º–µ–Ω—Ç...*"
            )
            if prompt_message_id:
                await edit_video_message(chat_id, prompt_message_id, video_path='assets/5.mp4', caption=preview_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error editing prompt in handle_amount for user {user_id}: {e}")
            
        async with bot.retrieve_data(user_id, chat_id) as data:
            data['deal_data']['amount'] = amount
            deal_data = data['deal_data']
        deal_id = generate_deal_id()
        db.collection('deals').document(str(deal_id)).set({
            'deal_id': deal_id,
            'creator_id': message.from_user.id,
            'creator_username': message.from_user.username,
            'deal_type': deal_data['type'],
            'item_links': deal_data.get('links'),
            'currency': deal_data['currency'],
            'amount': deal_data['amount'],
            'status': 'waiting_for_participant',
            'creation_date': time.time()
        })
        logger.info(f"Created deal {deal_id} for user {user_id}")

        join_link = generate_join_link(deal_id)
        text = (
            f"üéâ *–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üÜî *ID —Å–¥–µ–ª–∫–∏:* `{deal_id}`\n"
            f"üí∞ *–°—É–º–º–∞:* `{deal_data['amount']} {deal_data['currency']}`\n"
            f"üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:*\n`{join_link}`\n\n"
            f"‚è≥ *–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–¥–µ–ª–∫–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!*"
        )
        # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        edited = False
        try:
            if prompt_message_id:
                edited = await edit_video_message(chat_id, prompt_message_id, video_path='assets/5.mp4', caption=text, reply_markup=get_in_deal_keyboard(deal_id, 'waiting_for_participant'), parse_mode='Markdown')
        except Exception:
            edited = False
        if not edited:
            await send_video_without_sound(chat_id, 'assets/5.mp4', caption=text, reply_markup=get_in_deal_keyboard(deal_id, 'waiting_for_participant'), parse_mode='Markdown')
        await bot.delete_state(user_id, chat_id)
    except Exception as e:
        logger.error(f"Error in handle_amount for user {user_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

@bot.message_handler(state=UserStates.AwaitingDetailsInput, content_types=['text'])
async def handle_details_input(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    logger.info(f"Processing details input for user {user_id} in chat {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with bot.retrieve_data(user_id, chat_id) as data:
        details_type = data.get('details_type', 'default')
        prompt_message_id = data.get('prompt_message_id')
        pending_deal_id = data.get('pending_deal_id')
        logger.info(f"State data for user {user_id}: details_type={details_type}, prompt_message_id={prompt_message_id}, pending_deal_id={pending_deal_id}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    text_value = (message.text or '').strip()
    if not text_value:
        await bot.send_message(chat_id, "‚ö† –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.delete_message(chat_id, message.message_id)
        logger.info(f"Deleted input message {message.message_id} for user {user_id}")
    except Exception as e:
        logger.error(f"Error deleting user message for user {user_id}: {e}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ Firestore
    try:
        details_currency = None
        if '_' in details_type:
            parts = details_type.split('_', 1)
            if len(parts) == 2:
                details_currency = parts[1]
        payload = {
            'type': details_type,
            'value': text_value,
            'updated_at': firestore.SERVER_TIMESTAMP
        }
        if details_currency:
            payload['currency'] = details_currency
        db.collection('user_details').document(str(user_id)).set(payload, merge=True)
        logger.info(f"Saved details for user {user_id}")
    except Exception as e:
        logger.error(f"Error saving details to Firestore for user {user_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ 8.mp4 —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if prompt_message_id:
            try:
                await bot.delete_message(chat_id, prompt_message_id)
            except Exception:
                pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await send_video_without_sound(
            chat_id, 
            'assets/8.mp4', 
            caption="‚úÖ *–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*", 
            parse_mode='Markdown'
        )
        
        if pending_deal_id:
            # –î–ª—è —Å–¥–µ–ª–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–¥–µ–ª–∫–µ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            logger.info(f"Continuing deal {pending_deal_id} for user {user_id}")
            await bot.delete_state(user_id, chat_id)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await asyncio.sleep(2)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–¥–µ–ª–∫–µ
            await complete_deal_join(chat_id, user_id, message.from_user.username, pending_deal_id)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–¥–µ–ª–∫–∞, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info(f"Details saved for user {user_id}, no pending deal")
            await bot.delete_state(user_id, chat_id)
    except Exception as e:
        logger.error(f"Error processing state for user {user_id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
app = web.Application()

async def handle_webhook(request):
    try:
        update = await request.json()
        await bot.process_new_updates([telebot.types.Update.de_json(update)])
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return web.Response(status=500)

app.router.add_post('/webhook', handle_webhook)

async def on_startup():
    try:
        await bot.remove_webhook()
        await bot.set_webhook(url=WEBHOOK_URL)
        logger.info(f"Webhook set to {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}")

async def on_shutdown():
    try:
        await bot.remove_webhook()
        logger.info("Webhook removed")
    except Exception as e:
        logger.error(f"Error removing webhook: {e}")

def escape_telegram_markdown(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown –≤ Telegram
    """
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def get_escaped_bot_username():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Å—ã–ª–∫–∞—Ö
    """
    return escape_telegram_markdown(BOT_USERNAME)

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
def generate_join_link(deal_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ
    """
    return f"https://t.me/{BOT_USERNAME}?start=deal_{deal_id}"

def escape_markdown_v2(text):
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2 –≤ Telegram
    """
    if not text:
        return text
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = text.replace('\\', '')
    
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

@bot.callback_query_handler(func=lambda call: call.data == "my_profile")
async def my_profile_handler(call):
    chat_id = call.message.chat.id
    try:
        profile_ref = db.collection('user_profile').document(str(call.from_user.id))
        if not profile_ref.get().exists:
            profile_ref.set({
                'user_id': call.from_user.id,
                'username': call.from_user.username,
                'balance': 0.0,
                'successful_deals': 0,
                'language': 'ru',
                'is_banned_from_admin': 0
            })
        profile = profile_ref.get().to_dict()
        username = profile.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        balance = profile.get('balance', 0.0)
        successful_deals = profile.get('successful_deals', 0)
        
        admin_ids = get_admin_ids()
        balance_text = "‚àû" if call.from_user.id in admin_ids else f"{balance:.2f}"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º; –¥–æ–±–∞–≤–ª—è–µ–º @ –∫ username
        display_username = f"@{username}" if username else '–ë–µ–∑ –∏–º–µ–Ω–∏'
        escaped_username = escape_markdown_v2(display_username)
        
        text = (
            "*üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"*üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {escaped_username}\n"
            f"*üí∞ –ë–∞–ª–∞–Ω—Å:* `{balance_text}`\n"
            f"*üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* `{successful_deals}`\n\n"
            f"üöÄ *–û—Å—É—â–µ—Å—Ç–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å Secure Deal ‚Äî —Å –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. ‚ö°Ô∏è*"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        if not await edit_video_message(chat_id, call.message.message_id, video_path='assets/1.mp4', caption=text, reply_markup=get_profile_keyboard(get_user_language(chat_id)), parse_mode='Markdown'):
            await send_video_without_sound(
                chat_id, 
                'assets/1.mp4', 
                caption=text, 
                reply_markup=get_profile_keyboard(get_user_language(chat_id)), 
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in my_profile for user {call.from_user.id}: {e}")
        await bot.send_message(chat_id, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @GiftGuarantHelp.")

if __name__ == '__main__':
    try:
        web.run_app(app, host=WEBHOOK_HOST, port=WEBHOOK_PORT, handle_signals=True, loop=asyncio.get_event_loop())
    except Exception as e:
        logger.error(f"Error starting web app: {e}")